{"version":3,"sources":["assets/logo.png","assets/file.png","config.js","LogIn.js","SigIn.js","modules/ipfs-car/dist/esm/pack/utils/normalise-input.js","modules/ipfs-car/dist/esm/blockstore/memory.js","modules/ipfs-car/dist/esm/pack/constants.js","modules/ipfs-car/dist/esm/pack/index.js","modules/ipfs-car/dist/esm/unpack/utils/verifying-get-only-blockstore.js","modules/ipfs-car/dist/esm/unpack/index.js","modules/web3.storage/src/platform.web.js","modules/web3.storage/src/lib.js","Home copy.js","FileInfo.js","App.js","assets/filePublic.png","assets/folder.png"],"names":["module","exports","app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","getAnalytics","require","LogIn","initializeAppCheck","ReCaptchaV3Provider","navigation","winSize","useWindowDimensions","config","console","log","auth","getAuth","React","email","setEmail","password","setPassword","a","async","AsyncStorage","getItem","credentials","JSON","parse","undefined","credentialsJson","signInWithEmailAndPassword","then","userCredential","push","catch","error","alert","View","style","width","height","backgroundColor","alignItems","Image","resizeMode","marginTop","source","uri","hp","borderRadius","justifyContent","Text","color","fontSize","fontWeight","TextInput","borderColor","borderWidth","textAlign","onChangeText","text","textContentType","placeholder","secureTextEntry","passwordRules","TouchableOpacity","onPress","setItem","stringify","marginBottom","name","size","SigIn","route","params","db","getFirestore","nome","setNome","cognome","setCognome","length","createUserWithEmailAndPassword","trim","setDoc","doc","replaceAll","goBack","err","isSingle","input","String","obj","ArrayBuffer","isView","Boolean","constructor","stream","isBlob","getNormaliser","normaliseInputSingle","MemoryBlockStore","store","Map","this","entries","cidStr","bytes","cid","CID","set","toString","Promise","resolve","get","Error","has","clear","BaseBlockstore","unixfsImporterOptionsDefault","cidVersion","chunker","maxChunkSize","hasher","sha256","rawLeaves","wrapWithDirectory","maxChildrenPerNode","pack","userBlockstore","blockstore","Array","isArray","last","pipe","importer","rootEntry","root","CarWriter","create","writer","carOut","out","carOutIter","Symbol","asyncIterator","writeAll","blocks","block","put","close","writingPromise","next","result","done","VerifyingGetOnlyBlockStore","res","isValid","b","cr","digest","hash","equals","multihash","carReader","roots","verifyingBlockService","fromCarReader","getRoots","unixFsExporter","unpackStream","readable","CarBlockIterator","fromIterable","asAsyncIterable","carIterator","verifyingBlockStore","fromBlockstore","toIterable","fetch","globalThis","Blob","Request","Response","File","Blockstore","paginator","Web3Storage","token","endpoint","URL","files","options","car","putCar","delete","status","opts","list","Authorization","onRootCidReady","onStoredChunk","maxRetries","from","map","f","path","content","CarReader","decoders","targetSize","url","headers","encodeURIComponent","carRoot","splitter","TreewalkCarSplitter","onCarChunk","carParts","part","carFile","type","pRetry","method","body","request","json","ok","message","retries","upload","transform","cars","toWeb3Response","statusText","service","listPage","before","search","URLSearchParams","Date","toISOString","maxResults","count","Infinity","errorMessage","page","toWeb3File","chunks","chunk","file","toFilenameWithPath","unixFsPath","slashIndex","indexOf","substring","response","unixFsIterator","entry","fn","link","parseLinkHeader","axios","default","mutexFoto","controllerFetch","AbortController","controllerFetchDownload","web3s","Home","images","setImages","folders","setFolders","stackDir","setStackDir","value","total","progressValue","setProgressValue","spinnerVisible","setSpinnerVisibile","reload","setReload","menuOpen","setMenuOpen","current","numFile","setNumFile","elementoSelezionato","setElementoSelezionato","valueModal","setValueModal","aggiornaFoto","newPhotoId","reject","getDocs","query","collection","orderBy","where","data","listFold","j","oldFolders","id","docs","i","includes","filter","item","ranHeightImage","Math","random","notPrivate","oldArray","modalita","menuSelection","menuSelectionFolder","openImagePickerAsync","selectedResult","confirm","errorLoading","filebuffer","enc","TextEncoder","passwordKey","window","crypto","subtle","importKey","encode","key","iv","arrayBuffer","encrypt","idFile","caricato","floor","addDoc","now","lastIndexOf","dir","el","deleteDoc","copy","newImages","splice","win","test","navigator","userAgent","open","document","write","addEventListener","ev","abort","signal","responseType","onDownloadProgress","event","getElementById","innerHTML","loaded","createElement","blob","createObjectURL","setAttribute","append","click","revokeObjectURL","remove","decrypt","decifrato","location","href","newName","prompt","newObject","estenzione","slice","updateDoc","controllo1","controllo2","newFolders","oldStack","Item","padding","flexDirection","cacheKey","aspectRatio","alignSelf","marginLeft","toFixed","toLocaleString","flex","Itemfolder","Modal","visible","transparent","position","iconColor","backgroundDownColor","isOpen","items","label","onMenuToggle","onItemPress","index","nameFolder","createFolder","renderItemIcon","textStyle","children","ActivityIndicator","progress","onChange","target","accept","display","multiple","for","signOut","newStack","pop","ScrollView","borderTopLeftRadius","borderTopRightRadius","FlatList","numColumns","renderItem","keyExtractor","itemFolders","FileInfo","stato","setStato","deals","contentContainerStyle","Stack","createNativeStackNavigator","App","NavigationContainer","Navigator","Screen","component","headerShown"],"mappings":"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","file":"static/js/app.70157759.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a7ce87a3.png\";","module.exports = __webpack_public_path__ + \"static/media/file.73e9524a.png\";","// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDxqS-2MmrVRbhmg49Bx2P1b4f_lFeSkQ0\",\n  authDomain: \"ounn-ea631.firebaseapp.com\",\n  databaseURL: \"https://ounn-ea631-default-rtdb.firebaseio.com\",\n  projectId: \"ounn-ea631\",\n  storageBucket: \"ounn-ea631.appspot.com\",\n  messagingSenderId: \"111990065034\",\n  appId: \"1:111990065034:web:1b1a4a2fd6d9aef5db6a73\",\n  measurementId: \"G-YL3CYJJN58\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\n\nexport default app;","import { StatusBar } from \"expo-status-bar\";\nimport * as React from \"react\";\nimport {\n  View,\n  Text,\n  Image,\n  TouchableOpacity,\n  useWindowDimensions,\n  TextInput,\n} from \"react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport {\n  widthPercentageToDP as wp,\n  heightPercentageToDP as hp,\n} from \"react-native-responsive-screen\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithEmailAndPassword } from \"firebase/auth\";\nconst {\n  initializeAppCheck,\n  ReCaptchaV3Provider,\n} = require(\"firebase/app-check\");\nimport Icon from \"react-native-vector-icons/MaterialCommunityIcons\";\nimport config from \"./config\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDfP0XCt3KrnuMtEvqGVlUtDu7ZyznV3nE\",\n  authDomain: \"darchive5.firebaseapp.com\",\n  projectId: \"darchive5\",\n  storageBucket: \"darchive5.appspot.com\",\n  messagingSenderId: \"401935292054\",\n  appId: \"1:401935292054:web:d0efd92ecd1b06e634d4b7\",\n  measurementId: \"G-TL4FJNPGS7\",\n};\n\nconst LogIn = ({ navigation }) => {\n  //per dimensioni finestra in real time\n  const winSize = useWindowDimensions();\n\n  //inizializzo firebase\n  //il provider recaptcha serve per rifiutare richieste che provengono da siti al di fuori di darchive\n  const app = config;\n  console.log(\"test\");\n /* const appcheck = initializeAppCheck(app, {\n    provider: new ReCaptchaV3Provider(config.ReCaptchaV3ProviderToken),\n    isTokenAutoRefreshEnabled: true,\n  }); */\n  const auth = getAuth(app);\n\n  let [email, setEmail] = React.useState(\"\");\n  let [password, setPassword] = React.useState(\"\");\n\n  let accedi = async () => {\n    signInWithEmailAndPassword(auth, email, password)\n      .then(async (userCredential) => {\n        //salvo per login automatico\n        await AsyncStorage.setItem(\n          \"credentials\",\n          JSON.stringify({\n            email: email,\n            password: password,\n          })\n        );\n\n        navigation.push(\"Home\", { email: email, password: password });\n      })\n      .catch((error) => {\n        alert(\"User credentials not valid: \"+error);\n      });\n  };\n\n  React.useEffect(async () => {\n    //se gia aveva eseguito l'accesso allora vado direttamente all'home\n    let credentials = await AsyncStorage.getItem(\"credentials\");\n    let credentialsJson = await JSON.parse(credentials);\n\n    if (credentialsJson != undefined)\n      signInWithEmailAndPassword(\n        auth,\n        credentialsJson.email,\n        credentialsJson.password\n      )\n        .then(async (userCredential) => {\n          navigation.push(\"Home\", {\n            email: credentialsJson.email,\n            password: credentialsJson.password,\n          });\n        })\n        .catch((error) => {\n          alert(\"User credentials not valid\");\n        });\n  }, []);\n\n  return (\n    <View\n      style={{\n        width: \"flex\",\n        height: \"100%\",\n        backgroundColor: \"#191919\",\n        alignItems: \"center\",\n      }}\n    >\n      {/*Logo */}\n      <Image\n        resizeMode=\"center\"\n        style={{\n          width: winSize.width / 2,\n          height: \"250px\",\n          marginTop: \"-20px\",\n        }}\n        source={{ uri: require(\"./assets/logo.png\") }}\n      ></Image>\n\n      <View\n        style={{\n          marginTop: hp(\"1%\"),\n          borderRadius: \"20px\",\n          width: winSize.width < 900 ? winSize.width - 100 : winSize.width / 3,\n          backgroundColor: \"#2b2b2b\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        {/*Login Text */}\n        <Text\n          style={{\n            color: \"white\",\n            fontSize: hp(\"5%\"),\n            fontWeight: \"200\",\n            marginTop: hp(\"5%\"),\n          }}\n        >\n          Login\n        </Text>\n\n        {/*Input EMail */}\n        <TextInput\n          style={{\n            marginTop: hp(\"3%\"),\n            height: hp(\"5%\"),\n            width: winSize.width < 900 ? winSize.width / 2 : winSize.width / 4,\n            borderColor: \"black\",\n            borderWidth: \"1px\",\n            borderRadius: hp(\"5%\"),\n            textAlign: \"center\",\n            backgroundColor: \"white\",\n          }}\n          onChangeText={(text) => {\n            setEmail(text);\n          }}\n          textContentType=\"emailAddress\"\n          placeholder=\"Email\"\n        ></TextInput>\n\n        {/*Input Password */}\n        <TextInput\n          style={{\n            marginTop: hp(\"3%\"),\n            height: hp(\"5%\"),\n            width: winSize.width < 900 ? winSize.width / 2 : winSize.width / 4,\n            borderColor: \"black\",\n            borderWidth: \"1px\",\n            borderRadius: hp(\"5%\"),\n            textAlign: \"center\",\n            backgroundColor: \"white\",\n          }}\n          onChangeText={(text) => {\n            setPassword(text);\n          }}\n          secureTextEntry=\"true\"\n          passwordRules=\"true\"\n          placeholder=\"Password\"\n        ></TextInput>\n\n        {/*Pulsante LogIn */}\n        <TouchableOpacity\n          style={{\n            marginTop: hp(\"3%\"),\n            backgroundColor: \"#ff5c5c\",\n            width: \"150px\",\n            height: \"40px\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n          onPress={() => {\n            accedi();\n          }}\n        >\n          <View>\n            <Text style={{ color: \"white\" }}>Send</Text>\n          </View>\n        </TouchableOpacity>\n\n        {/*SigIn pulsante */}\n        <TouchableOpacity\n          style={{ marginTop: hp(\"2%\") }}\n          onPress={() => {\n            navigation.push(\"SigIn\", { auth: auth });\n          }}\n        >\n          <Text style={{ fontSize: hp(\"2%\"), fontWeight: 200, color: \"white\" }}>\n            SigIn now\n          </Text>\n        </TouchableOpacity>\n\n        {/*Pulsante info */}\n        <TouchableOpacity\n          style={{\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            marginTop: \"3%\",\n            marginBottom: hp(\"5%\"),\n          }}\n          onPress={() => {\n            navigation.push(\"Settings\", { email: \"\" });\n          }}\n        >\n          <Icon name=\"information-outline\" color={\"white\"} size={20} />\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\nexport default LogIn;\n","import { StatusBar } from \"expo-status-bar\";\nimport * as React from \"react\";\nimport {\n  View,\n  Text,\n  Image,\n  TouchableOpacity,\n  useWindowDimensions,\n  TextInput,\n} from \"react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport {\n  widthPercentageToDP as wp,\n  heightPercentageToDP as hp,\n} from \"react-native-responsive-screen\";\nimport { initializeApp } from \"firebase/app\";\nimport { createUserWithEmailAndPassword, getAuth } from \"firebase/auth\";\nimport {\n  addDoc,\n  doc,\n  collection,\n  getFirestore,\n  getDocs,\n  query,\n  deleteDoc,\n  orderBy,\n  startAfter,\n  limit,\n  startAt,\n  endBefore,\n  updateDoc,\n  setDoc,\n  getDoc,\n  where,\n} from \"firebase/firestore/\";\n\nconst SigIn = ({ route, navigation }) => {\n  //per dimensioni finestra in real time\n  const winSize = useWindowDimensions();\n\n  //prendo auth firebase inizializzato in login\n  const auth = route.params.auth;\n\n  //inizializzo databse firebase\n  const db = getFirestore();\n\n  let [nome, setNome] = React.useState(\"\");\n  let [cognome, setCognome] = React.useState(\"\");\n  let [email, setEmail] = React.useState(\"\");\n  let [password, setPassword] = React.useState(\"\");\n\n  let registrati = () => {\n    if (nome != \"\" && cognome != \"\" && email != \"\" && password != \"\") {\n      if (password.length >= 6) {\n        //creo nyovo utente se tutti campi compilati e email non esistente già e password più lunga di 6 caratteri\n        createUserWithEmailAndPassword(auth, email.trim(), password.trim())\n          .then(() => {\n            //salvo nome e cognome\n            setDoc(doc(db, \"Utenti\", email.replaceAll(\".\", \"DOT\").trim()), {\n              nome: nome.trim(),\n              cognome: cognome.trim(),\n            });\n\n            navigation.goBack();\n\n            alert(\"Registration has been completed successfully\");\n          })\n          .catch((err) => {\n            console.log(err);\n            alert(\"This email already exist or is invalid\");\n          });\n      } else {\n        alert(\"Password has to be at least 6 character\");\n      }\n    } else {\n      alert(\"Complete all fields\");\n    }\n  };\n\n  return (\n    <View\n      style={{\n        width: \"flex\",\n        height: \"100%\",\n        backgroundColor: \"#191919\",\n        alignItems: \"center\",\n      }}\n    >\n      {/*Logo */}\n      <Image\n        resizeMode=\"center\"\n        style={{\n          width: winSize.width / 2,\n          height: \"250px\",\n          marginTop: \"-20px\",\n        }}\n        source={{ uri: require(\"./assets/logo.png\") }}\n      ></Image>\n\n      <View\n        style={{\n          marginTop: hp(\"1%\"),\n          borderRadius: \"20px\",\n          width: winSize.width < 900 ? winSize.width - 100 : winSize.width / 3,\n          backgroundColor: \"#2b2b2b\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        {/*SigIn Text */}\n        <Text\n          style={{\n            color: \"white\",\n            fontSize: hp(\"5%\"),\n            fontWeight: \"200\",\n            marginTop: hp(\"5%\"),\n          }}\n        >\n          SigIn\n        </Text>\n\n        {/*Input Nome */}\n        <TextInput\n          style={{\n            marginTop: hp(\"3%\"),\n            height: hp(\"5%\"),\n            width: winSize.width < 900 ? winSize.width / 2 : winSize.width / 4,\n            borderColor: \"black\",\n            backgroundColor: \"white\",\n            borderWidth: \"1px\",\n            borderRadius: hp(\"5%\"),\n            textAlign: \"center\",\n          }}\n          onChangeText={(text) => {\n            setNome(text);\n          }}\n          textContentType=\"name\"\n          placeholder=\"Name\"\n        ></TextInput>\n\n        {/*Input Cognome */}\n        <TextInput\n          style={{\n            marginTop: hp(\"3%\"),\n            height: hp(\"5%\"),\n            width: winSize.width < 900 ? winSize.width / 2 : winSize.width / 4,\n            borderColor: \"black\",\n            backgroundColor: \"white\",\n            borderWidth: \"1px\",\n            borderRadius: hp(\"5%\"),\n            textAlign: \"center\",\n          }}\n          onChangeText={(text) => {\n            setCognome(text);\n          }}\n          placeholder=\"Surname\"\n        ></TextInput>\n\n        {/*Input EMail */}\n        <TextInput\n          style={{\n            marginTop: hp(\"3%\"),\n            height: hp(\"5%\"),\n            width: winSize.width < 900 ? winSize.width / 2 : winSize.width / 4,\n            borderColor: \"black\",\n            borderWidth: \"1px\",\n            borderRadius: hp(\"5%\"),\n            textAlign: \"center\",\n            backgroundColor: \"white\",\n          }}\n          onChangeText={(text) => {\n            setEmail(text);\n          }}\n          textContentType=\"emailAddress\"\n          placeholder=\"Email\"\n        ></TextInput>\n\n        {/*Input Password */}\n        <TextInput\n          style={{\n            marginTop: hp(\"3%\"),\n            height: hp(\"5%\"),\n            width: winSize.width < 900 ? winSize.width / 2 : winSize.width / 4,\n            borderColor: \"black\",\n            borderWidth: \"1px\",\n            borderRadius: hp(\"5%\"),\n            textAlign: \"center\",\n            backgroundColor: \"white\",\n          }}\n          onChangeText={(text) => {\n            setPassword(text);\n          }}\n          secureTextEntry=\"true\"\n          passwordRules=\"true\"\n          placeholder=\"Password\"\n        ></TextInput>\n\n        {/*Pulsante Registrati */}\n        <TouchableOpacity\n          style={{\n            marginTop: hp(\"3%\"),\n            backgroundColor: \"#ff5c5c\",\n            width: \"150px\",\n            height: \"40px\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n          onPress={() => {\n            registrati();\n          }}\n        >\n          <View>\n            <Text style={{ color: \"white\" }}>Send</Text>\n          </View>\n        </TouchableOpacity>\n\n        {/*goBack pulsante */}\n        <TouchableOpacity\n          style={{ marginTop: hp(\"2%\"), marginBottom: hp(\"5%\") }}\n          onPress={() => navigation.goBack()}\n        >\n          <Text style={{ fontSize: hp(\"2%\"), fontWeight: 200, color: \"white\" }}>\n            Go back\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\nexport default SigIn;\n","import { normaliseInput as normaliseInputSingle } from '../../../../../../node_modules/ipfs-core-utils/';\nimport { normaliseInput as normaliseInputMultiple } from '../../../../../../node_modules/ipfs-core-utils/';\nfunction isBytes(obj) {\n    return ArrayBuffer.isView(obj) || obj instanceof ArrayBuffer;\n}\nfunction isBlob(obj) {\n    return Boolean(obj.constructor) &&\n        (obj.constructor.name === 'Blob' || obj.constructor.name === 'File') &&\n        typeof obj.stream === 'function';\n}\nfunction isSingle(input) {\n    return typeof input === 'string' || input instanceof String || isBytes(input) || isBlob(input) || '_readableState' in input;\n}\n/**\n * Get a single or multiple normaliser depending on the input.\n */\nexport function getNormaliser(input) {\n    if (isSingle(input)) {\n        return normaliseInputSingle(input);\n    }\n    else {\n        return normaliseInputMultiple(input);\n    }\n}\n","import { CID } from 'multiformats';\nimport { BaseBlockstore } from 'blockstore-core';\nexport class MemoryBlockStore extends BaseBlockstore {\n    constructor() {\n        super();\n        this.store = new Map();\n    }\n    async *blocks() {\n        for (const [cidStr, bytes] of this.store.entries()) {\n            yield { cid: CID.parse(cidStr), bytes };\n        }\n    }\n    put(cid, bytes) {\n        this.store.set(cid.toString(), bytes);\n        return Promise.resolve();\n    }\n    get(cid) {\n        const bytes = this.store.get(cid.toString());\n        if (!bytes) {\n            throw new Error(`block with cid ${cid.toString()} no found`);\n        }\n        return Promise.resolve(bytes);\n    }\n    has(cid) {\n        return Promise.resolve(this.store.has(cid.toString()));\n    }\n    close() {\n        this.store.clear();\n        return Promise.resolve();\n    }\n}\n","import { sha256 } from 'multiformats/hashes/sha2';\nexport const unixfsImporterOptionsDefault = {\n    cidVersion: 1,\n    chunker: 'fixed',\n    maxChunkSize: 262144,\n    hasher: sha256,\n    rawLeaves: true,\n    wrapWithDirectory: true,\n    maxChildrenPerNode: 174\n};\n","import last from 'it-last';\nimport pipe from 'it-pipe';\nimport { CarWriter } from '@ipld/car';\nimport { importer } from 'ipfs-unixfs-importer';\nimport { getNormaliser } from \"./utils/normalise-input.js\";\nimport { MemoryBlockStore } from \"../blockstore/memory.js\";\nimport { unixfsImporterOptionsDefault } from \"./constants.js\";\nexport async function pack({ input, blockstore: userBlockstore, hasher, maxChunkSize, maxChildrenPerNode, wrapWithDirectory, rawLeaves }) {\n    if (!input || (Array.isArray(input) && !input.length)) {\n        throw new Error('missing input file(s)');\n    }\n    const blockstore = userBlockstore ? userBlockstore : new MemoryBlockStore();\n    // Consume the source\n    const rootEntry = await last(pipe(getNormaliser(input), (source) => importer(source, blockstore, {\n        ...unixfsImporterOptionsDefault,\n        hasher: hasher || unixfsImporterOptionsDefault.hasher,\n        maxChunkSize: maxChunkSize || unixfsImporterOptionsDefault.maxChunkSize,\n        maxChildrenPerNode: maxChildrenPerNode || unixfsImporterOptionsDefault.maxChildrenPerNode,\n        wrapWithDirectory: wrapWithDirectory === false ? false : unixfsImporterOptionsDefault.wrapWithDirectory,\n        rawLeaves: rawLeaves == null ? unixfsImporterOptionsDefault.rawLeaves : rawLeaves\n    })));\n    if (!rootEntry || !rootEntry.cid) {\n        throw new Error('given input could not be parsed correctly');\n    }\n    const root = rootEntry.cid;\n    const { writer, out: carOut } = await CarWriter.create([root]);\n    const carOutIter = carOut[Symbol.asyncIterator]();\n    let writingPromise;\n    const writeAll = async () => {\n        for await (const block of blockstore.blocks()) {\n            // `await` will block until all bytes in `carOut` are consumed by the user\n            // so we have backpressure here\n            await writer.put(block);\n        }\n        await writer.close();\n        if (!userBlockstore) {\n            await blockstore.close();\n        }\n    };\n    const out = {\n        [Symbol.asyncIterator]() {\n            if (writingPromise != null) {\n                throw new Error('Multiple iterator not supported');\n            }\n            // don't start writing until the user starts consuming the iterator\n            writingPromise = writeAll();\n            return {\n                async next() {\n                    const result = await carOutIter.next();\n                    if (result.done) {\n                        await writingPromise; // any errors will propagate from here\n                    }\n                    return result;\n                }\n            };\n        }\n    };\n    return { root, out };\n}\n","import { equals } from 'uint8arrays/equals';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { BaseBlockstore } from 'blockstore-core';\nexport class VerifyingGetOnlyBlockStore extends BaseBlockstore {\n    constructor(blockstore) {\n        super();\n        this.store = blockstore;\n    }\n    async get(cid) {\n        const res = await this.store.get(cid);\n        if (!res) {\n            throw new Error(`Incomplete CAR. Block missing for CID ${cid}`);\n        }\n        if (!isValid({ cid, bytes: res })) {\n            throw new Error(`Invalid CAR. Hash of block data does not match CID ${cid}`);\n        }\n        return res;\n    }\n    static fromBlockstore(b) {\n        return new VerifyingGetOnlyBlockStore(b);\n    }\n    static fromCarReader(cr) {\n        return new VerifyingGetOnlyBlockStore({\n            // Return bytes in the same fashion as a Blockstore implementation\n            get: async (cid) => {\n                const block = await cr.get(cid);\n                return block === null || block === void 0 ? void 0 : block.bytes;\n            }\n        });\n    }\n}\nasync function isValid({ cid, bytes }) {\n    const hash = await sha256.digest(bytes);\n    return equals(hash.digest, cid.multihash.digest);\n}\n","import toIterable from 'browser-readablestream-to-it';\nimport { CarBlockIterator } from '@ipld/car/iterator';\nimport { recursive as unixFsExporter } from 'ipfs-unixfs-exporter';\nimport { VerifyingGetOnlyBlockStore } from \"./utils/verifying-get-only-blockstore.js\";\nimport { MemoryBlockStore } from \"../blockstore/memory.js\";\n// Export unixfs entries from car file\nexport async function* unpack(carReader, roots) {\n    const verifyingBlockService = VerifyingGetOnlyBlockStore.fromCarReader(carReader);\n    if (!roots || roots.length === 0) {\n        roots = await carReader.getRoots();\n    }\n    for (const root of roots) {\n        yield* unixFsExporter(root, verifyingBlockService, { /* options */});\n    }\n}\nexport async function* unpackStream(readable, { roots, blockstore: userBlockstore } = {}) {\n    const carIterator = await CarBlockIterator.fromIterable(asAsyncIterable(readable));\n    const blockstore = userBlockstore || new MemoryBlockStore();\n    for await (const block of carIterator) {\n        await blockstore.put(block.cid, block.bytes);\n    }\n    const verifyingBlockStore = VerifyingGetOnlyBlockStore.fromBlockstore(blockstore);\n    if (!roots || roots.length === 0) {\n        roots = await carIterator.getRoots();\n    }\n    for (const root of roots) {\n        yield* unixFsExporter(root, verifyingBlockStore);\n    }\n}\n/**\n * Upgrade a ReadableStream to an AsyncIterable if it isn't already\n *\n * ReadableStream (e.g res.body) is asyncIterable in node, but not in chrome, yet.\n * see: https://bugs.chromium.org/p/chromium/issues/detail?id=929585\n */\nfunction asAsyncIterable(readable) {\n    // @ts-ignore how to convince tsc that we are checking the type here?\n    return Symbol.asyncIterator in readable ? readable : toIterable(readable);\n}\n","// TODO: Use indexedDb\nimport { MemoryBlockStore } from '../../ipfs-car/dist/esm/blockstore/memory'\n\nexport const fetch = globalThis.fetch\nexport const Request = globalThis.Request\nexport const Response = globalThis.Response\nexport const Blob = globalThis.Blob\nexport const File = globalThis.File\nexport const Blockstore = MemoryBlockStore\n","/**\n * A client library for the https://web3.storage/ service. It provides a convenient\n * interface for working with the [Raw HTTP API](https://web3.storage/#api-docs)\n * from a web browser or [Node.js](https://nodejs.org/) and comes bundled with\n * TS for out-of-the box type inference and better IntelliSense.\n *\n * @example\n * ```js\n * import { Web3Storage, File } from 'web3.storage'\n * const client = new Web3Storage({ token: API_TOKEN })\n *\n * const cid = await client.put([new File(['hello world'], 'hello.txt', { type: 'text/plain' })])\n * ```\n * @module\n */\nimport { transform } from 'streaming-iterables'\nimport pRetry from 'p-retry'\nimport { pack } from '../../ipfs-car/dist/esm/pack'\nimport { parseLinkHeader } from '@web3-storage/parse-link-header'\nimport { unpackStream } from '../../ipfs-car/dist/esm/unpack'\nimport { TreewalkCarSplitter } from 'carbites/treewalk'\nimport { CarReader } from '@ipld/car'\nimport { filesFromPath, getFilesFromPath } from 'files-from-path'\nimport {\n  fetch,\n  File,\n  Blob,\n  Blockstore\n} from './platform.js'\n\nconst MAX_PUT_RETRIES = 5\nconst MAX_CONCURRENT_UPLOADS = 3\nconst MAX_CHUNK_SIZE = 1024 * 1024 * 10 // chunk to ~10MB CARs\n\n/** @typedef { import('./lib/interface.js').API } API */\n/** @typedef { import('./lib/interface.js').Status} Status */\n/** @typedef { import('./lib/interface.js').Upload} Upload */\n/** @typedef { import('./lib/interface.js').Service } Service */\n/** @typedef { import('./lib/interface.js').Web3File} Web3File */\n/** @typedef { import('./lib/interface.js').Filelike } Filelike */\n/** @typedef { import('./lib/interface.js').CIDString} CIDString */\n/** @typedef { import('./lib/interface.js').PutOptions} PutOptions */\n/** @typedef { import('./lib/interface.js').PutCarOptions} PutCarOptions */\n/** @typedef { import('./lib/interface.js').UnixFSEntry} UnixFSEntry */\n/** @typedef { import('./lib/interface.js').Web3Response} Web3Response */\n\n/**\n * @implements Service\n */\nclass Web3Storage {\n  /**\n   * Constructs a client bound to the given `options.token` and\n   * `options.endpoint`.\n   *\n   * @example\n   * ```js\n   * import { Web3Storage } from 'web3.storage'\n   * const client = new Web3Storage({ token: API_TOKEN })\n   * ```\n   *\n   * @param {{token: string, endpoint?:URL}} options\n   */\n  constructor () {\n    /**\n     * Authorization token.\n     *\n     * @readonly\n     */\n    this.token =   'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweGE4MjU5MDcyYkUxRmEwODhhZTA3MTI3OTg2NDVEY0VBRjFGNDMzREQiLCJpc3MiOiJ3ZWIzLXN0b3JhZ2UiLCJpYXQiOjE2NTgyMjcyNTE1MTgsIm5hbWUiOiJvbm4ifQ.6AAz_KHuowFfJcxlf0jHbRoVEAKMv6iER_WSYkaUtr0',\n\n    /**\n     * Service API endpoint `URL`.\n     * @readonly\n     */\n    this.endpoint = new URL('https://api.web3.storage')\n  }\n\n  /**\n   * @hidden\n   * @param {string} token\n   * @returns {Record<string, string>}\n   */\n  static headers (token) {\n    if (!token) throw new Error('missing token')\n    return {\n      Authorization: `Bearer ${token}`,\n      'X-Client': 'web3.storage/js'\n    }\n  }\n\n  /**\n   * @param {Service} service\n   * @param {Iterable<Filelike>} files\n   * @param {PutOptions} [options]\n   * @returns {Promise<CIDString>}\n   */\n  static async put ({ endpoint, token }, files, {\n    onRootCidReady,\n    onStoredChunk,\n    maxRetries = MAX_PUT_RETRIES,\n    wrapWithDirectory = true,\n    name\n  } = {}) {\n    const blockstore = new Blockstore()\n    try {\n      const { out, root } = await pack({\n        input: Array.from(files).map((f) => ({\n          path: f.name,\n          content: f.stream()\n        })),\n        blockstore,\n        wrapWithDirectory,\n        maxChunkSize: 1048576,\n        maxChildrenPerNode: 1024\n      })\n      onRootCidReady && onRootCidReady(root.toString())\n      const car = await CarReader.fromIterable(out)\n      return await Web3Storage.putCar({ endpoint, token }, car, { onStoredChunk, maxRetries, name })\n    } finally {\n      await blockstore.close()\n    }\n  }\n\n  /**\n   * @param {Service} service\n   * @param {import('@ipld/car/api').CarReader} car\n   * @param {PutCarOptions} [options]\n   * @returns {Promise<CIDString>}\n   */\n  static async putCar ({ endpoint, token }, car, {\n    name,\n    onStoredChunk,\n    maxRetries = MAX_PUT_RETRIES,\n    decoders\n  } = {}) {\n    const targetSize = MAX_CHUNK_SIZE\n    const url = new URL('car', endpoint)\n    let headers = Web3Storage.headers(token)\n\n    if (name) {\n      headers = { ...headers, 'X-Name': encodeURIComponent(name) }\n    }\n\n    const roots = await car.getRoots()\n    if (roots[0] == null) {\n      throw new Error('missing root CID')\n    }\n    if (roots.length > 1) {\n      throw new Error('too many roots')\n    }\n\n    const carRoot = roots[0].toString()\n    const splitter = new TreewalkCarSplitter(car, targetSize, { decoders })\n\n    /**\n     * @param {AsyncIterable<Uint8Array>} car\n     * @returns {Promise<CIDString>}\n     */\n    const onCarChunk = async car => {\n      const carParts = []\n      for await (const part of car) {\n        carParts.push(part)\n      }\n\n      const carFile = new Blob(carParts, { type: 'application/car' })\n      const res = await pRetry(\n        async () => {\n          const request = await fetch(url.toString(), {\n            method: 'POST',\n            headers,\n            body: carFile\n          })\n          /* c8 ignore next 3 */\n          if (request.status === 429) {\n            throw new Error('rate limited')\n          }\n          const res = await request.json()\n          if (!request.ok) {\n            throw new Error(res.message)\n          }\n\n          if (res.cid !== carRoot) {\n            throw new Error(`root CID mismatch, expected: ${carRoot}, received: ${res.cid}`)\n          }\n          return res.cid\n        },\n        { retries: maxRetries }\n      )\n\n      onStoredChunk && onStoredChunk(carFile.size)\n      return res\n    }\n\n    const upload = transform(MAX_CONCURRENT_UPLOADS, onCarChunk)\n    for await (const _ of upload(splitter.cars())) {} // eslint-disable-line\n    return carRoot\n  }\n\n  /**\n   * @param {Service} service\n   * @param {CIDString} cid\n   * @returns {Promise<Web3Response | null>}\n   */\n  static async get ({ endpoint, token }, cid) {\n    const url = new URL(`car/${cid}`, endpoint)\n    const res = await fetch(url.toString(), {\n      method: 'GET',\n      headers: Web3Storage.headers(token)\n    })\n    /* c8 ignore next 3 */\n    if (res.status === 429) {\n      throw new Error('rate limited')\n    }\n    return toWeb3Response(res)\n  }\n\n  /**\n   * @param {Service} service\n   * @param {CIDString} cid\n   * @returns {Promise<CIDString>}\n   */\n  /* c8 ignore next 4 */\n  static async delete ({ endpoint, token }, cid) {\n    console.log('Not deleting', cid, endpoint, token)\n    throw Error('.delete not implemented yet')\n  }\n\n  /**\n   * @param {Service} service\n   * @param {CIDString} cid\n   * @returns {Promise<Status | undefined>}\n   */\n  static async status ({ endpoint, token }, cid) {\n    const url = new URL(`status/${cid}`, endpoint)\n    const res = await fetch(url.toString(), {\n      method: 'GET',\n      headers: Web3Storage.headers(token)\n    })\n    /* c8 ignore next 3 */\n    if (res.status === 429) {\n      throw new Error('rate limited')\n    }\n    if (res.status === 404) {\n      return undefined\n    }\n    if (!res.ok) {\n      throw new Error(res.statusText)\n    }\n    return res.json()\n  }\n\n  /**\n   * @param {Service} service\n   * @param {object} [opts]\n   * @param {string} [opts.before] list items uploaded before this ISO 8601 date string\n   * @param {number} [opts.maxResults] maximum number of results to return\n   * @returns {AsyncIterable<Upload>}\n   */\n  static async * list (service, { before = new Date().toISOString(), maxResults = Infinity } = {}) {\n  /**\n   * @param {Service} service\n   * @param {{before: string, size: number}} opts\n   * @returns {Promise<Response>}\n   */\n    function listPage ({ endpoint, token }, { before, size }) {\n      const search = new URLSearchParams({ before, size: size.toString() })\n      const url = new URL(`user/uploads?${search}`, endpoint)\n      return fetch(url.toString(), {\n        method: 'GET',\n        headers: {\n          ...Web3Storage.headers(token),\n          'Access-Control-Request-Headers': 'Link'\n        }\n      })\n    }\n    let count = 0\n    const size = maxResults > 100 ? 100 : maxResults\n    for await (const res of paginator(listPage, service, { before, size })) {\n      if (!res.ok) {\n        /* c8 ignore next 3 */\n        if (res.status === 429) {\n          throw new Error('rate limited')\n        }\n\n        /* c8 ignore next 2 */\n        const errorMessage = await res.json()\n        throw new Error(`${res.status} ${res.statusText} ${errorMessage ? '- ' + errorMessage.message : ''}`)\n      }\n      const page = await res.json()\n      for (const upload of page) {\n        if (++count > maxResults) {\n          return\n        }\n        yield upload\n      }\n    }\n  }\n\n  // Just a sugar so you don't have to pass around endpoint and token around.\n\n  /**\n   * Uploads files to web3.storage. Files are hashed in the client and uploaded as a single\n   * [Content Addressed Archive(CAR)](https://github.com/ipld/specs/blob/master/block-layer/content-addressable-archives.md).\n   * Takes a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob)\n   *\n   * Returns the corresponding Content Identifier (CID).\n   *\n   * @example\n   * ```js\n   * const file = new File(['hello world'], 'hello.txt', { type: 'text/plain' })\n   * const cid = await client.put([file])\n   * ```\n   * @param {Iterable<Filelike>} files\n   * @param {PutOptions} [options]\n   */\n  put (files, options) {\n    return Web3Storage.put(this, files, options)\n  }\n\n  /**\n   * Uploads a CAR ([Content Addressed Archive](https://github.com/ipld/specs/blob/master/block-layer/content-addressable-archives.md)) file to web3.storage.\n   * Takes a CarReader interface from @ipld/car\n   *\n   * Returns the corresponding Content Identifier (CID).\n   *\n   * @example\n   * ```js\n   * import fs from 'fs'\n   * import { Readable } from 'stream'\n   * import { CarReader, CarWriter } from '@ipld/car'\n   * import * as raw from 'multiformats/codecs/raw'\n   * import { CID } from 'multiformats/cid'\n   * import { sha256 } from 'multiformats/hashes/sha2'\n   *\n   * async function getCar() {\n   *    const bytes = new TextEncoder().encode('random meaningless bytes')\n   *    const hash = await sha256.digest(raw.encode(bytes))\n   *    const cid = CID.create(1, raw.code, hash)\n   *\n   *    // create the writer and set the header with a single root\n   *    const { writer, out } = await CarWriter.create([cid])\n   *    Readable.from(out).pipe(fs.createWriteStream('example.car'))\n\n   *    // store a new block, creates a new file entry in the CAR archive\n   *    await writer.put({ cid, bytes })\n   *    await writer.close()\n\n   *    const inStream = fs.createReadStream('example.car')\n   *    // read and parse the entire stream in one go, this will cache the contents of\n   *    // the car in memory so is not suitable for large files.\n   *    const reader = await CarReader.fromIterable(inStream)\n   *    return reader\n   * }\n   *\n   * const car = await getCar()\n   * const cid = await client.putCar(car)\n   * ```\n   * @param {import('@ipld/car/api').CarReader} car\n   * @param {PutCarOptions} [options]\n   */\n  putCar (car, options) {\n    return Web3Storage.putCar(this, car, options)\n  }\n\n  /**\n   * Fetch the Content Addressed Archive by its root CID.\n   * @param {CIDString} cid\n   */\n  get (cid) {\n    return Web3Storage.get(this, cid)\n  }\n\n  /**\n   * @param {CIDString} cid\n   */\n  /* c8 ignore next 3 */\n  delete (cid) {\n    return Web3Storage.delete(this, cid)\n  }\n\n  /**\n   * Fetch info on Filecoin deals and IPFS pins that a given CID is replicated in.\n   * @param {CIDString} cid\n   */\n  status (cid) {\n    return Web3Storage.status(this, cid)\n  }\n\n  /**\n   * Find all uploads for this account. Use a `for await...of` loop to fetch them all.\n   * @example\n   * Fetch all the uploads\n   * ```js\n   * const uploads = []\n   * for await (const item of client.list()) {\n   *    uploads.push(item)\n   * }\n   * ```\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of\n   * @param {object} [opts]\n   * @param {string} [opts.before] list items uploaded before this ISO 8601 date string\n   * @param {number} [opts.maxResults] maximum number of results to return\n   * @returns {AsyncIterable<Upload>}\n   */\n  list (opts) {\n    return Web3Storage.list(this, opts)\n  }\n}\n\n/**\n * Map a UnixFSEntry to a File with a cid property\n * @param {UnixFSEntry} entry\n * @returns {Promise<Web3File>}\n */\nasync function toWeb3File ({ content, path, cid }) {\n  const chunks = []\n  for await (const chunk of content()) {\n    chunks.push(chunk)\n  }\n  const file = new File(chunks, toFilenameWithPath(path))\n  return Object.assign(file, { cid: cid.toString() })\n}\n\n/**\n * Trim the root cid from the path if there is anyting after it.\n * bafy...ic2q/path/to/pinpie.jpg => path/to/pinpie.jpg\n *         bafy...ic2q/pinpie.jpg => pinpie.jpg\n *                    bafk...52zy => bafk...52zy\n * @param {string} unixFsPath\n * @returns {string}\n */\nfunction toFilenameWithPath (unixFsPath) {\n  const slashIndex = unixFsPath.indexOf('/')\n  return slashIndex === -1 ? unixFsPath : unixFsPath.substring(slashIndex + 1)\n}\n\n/**\n * Add car unpacking smarts to the response object,\n * @param {Response} res\n * @returns {Web3Response}\n */\nfunction toWeb3Response (res) {\n  const response = Object.assign(res, {\n    unixFsIterator: async function * () {\n      if (!res.ok) {\n        throw new Error(`Response was not ok: ${res.status} ${res.statusText} - Check for { \"ok\": false } on the Response object before calling .unixFsIterator`)\n      }\n      /* c8 ignore next 3 */\n      if (!res.body) {\n        throw new Error('No body on response')\n      }\n      const blockstore = new Blockstore()\n      try {\n        for await (const entry of unpackStream(res.body, { blockstore })) {\n          yield entry\n        }\n      } finally {\n        await blockstore.close()\n      }\n    },\n    files: async () => {\n      if (!res.ok) {\n        throw new Error(`Response was not ok: ${res.status} ${res.statusText} - Check for { \"ok\": false } on the Response object before calling .files`)\n      }\n      const files = []\n      // @ts-ignore we're using the enriched response here\n      for await (const entry of response.unixFsIterator()) {\n        if (entry.type === 'directory') {\n          continue\n        }\n        const file = await toWeb3File(entry)\n        files.push(file)\n      }\n      return files\n    }\n  })\n  return response\n}\n\n/**\n * Follow Link headers on a Response, to fetch all the things.\n *\n * @param {(service: Service, opts: any) => Promise<Response>} fn\n * @param {Service} service\n * @param {{}} opts\n */\nasync function * paginator (fn, service, opts) {\n  let res = await fn(service, opts)\n  yield res\n  let link = parseLinkHeader(res.headers.get('Link') || '')\n  // @ts-ignore\n  while (link && link.next) {\n    // @ts-ignore\n    res = await fn(service, link.next)\n    yield res\n    link = parseLinkHeader(res.headers.get('Link') || '')\n  }\n}\n\nexport { Web3Storage, File, Blob, filesFromPath, getFilesFromPath }\n\n/**\n * Just to verify API compatibility.\n * TODO: convert lib to a regular class that can be type checked.\n * @type {API}\n */\nconst api = Web3Storage\nvoid api // eslint-disable-line no-void\n","import { StatusBar } from \"expo-status-bar\";\nimport * as React from \"react\";\nimport {\n  View,\n  Text,\n  Image,\n  TouchableOpacity,\n  useWindowDimensions,\n  ActivityIndicator,\n  FlatList,\n  ScrollView,\n  Modal,\n  Alert,\n} from \"react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport {\n  widthPercentageToDP as wp,\n  heightPercentageToDP as hp,\n} from \"react-native-responsive-screen\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport {\n  addDoc,\n  doc,\n  collection,\n  getFirestore,\n  getDocs,\n  query,\n  deleteDoc,\n  orderBy,\n  startAfter,\n  limit,\n  startAt,\n  endBefore,\n  updateDoc,\n  setDoc,\n  getDoc,\n  where,\n  increment,\n} from \"firebase/firestore/\";\nimport { signOut, getAuth } from \"firebase/auth\";\nimport {\n  Menu,\n  MenuOptions,\n  MenuOption,\n  MenuTrigger,\n  MenuProvider,\n} from \"react-native-popup-menu\";\nvar aesjs = require(\"aes-js\");\nimport Spinner from \"react-native-loading-spinner-overlay\";\nconst axios = require(\"axios\").default;\nimport * as Progress from \"react-native-progress\";\n\n\n\n\n\n/*\nimport { TreewalkCarSplitter } from \"carbites/treewalk\";\nimport { CarReader } from \"@ipld/car\";\nimport { CarWriter } from \"@ipld/car/lib/writer-browser\";\nimport { pack } from \"ipfs-car/dist/esm/pack\";\nimport { packToBlob } from \"ipfs-car/dist/esm/pack/blob\";\nimport { MemoryBlockStore } from \"ipfs-car/dist/esm/blockstore/memory\";\nimport { NFTStorage } from \"nft.storage\";\nimport { Blockstore } from \"nft.storage/src/platform\";\nimport { BlockstoreCarReader } from \"nft.storage/src/bs-car-reader\";\nimport { transform } from \"streaming-iterables\";\n*/\n\n\n\n\n\nimport { FloatingMenu } from \"react-native-floating-action-menu\";\nimport Icon from \"react-native-vector-icons/MaterialCommunityIcons\";\nimport config from \"./config\";\nimport { Web3Storage, File } from \"./modules/web3.storage\";\nimport copy from \"copy-to-clipboard\";\n\nlet mutexFoto = false;\nlet controllerFetch = new AbortController();\nlet controllerFetchDownload = new AbortController();\n//ho modificato il costruttore in modo da accettare l'abort controller per poter annullare il caricamento\nlet web3s = new Web3Storage();\n\nconst Home = ({ route, navigation }) => {\n  //per dimensioni finestra in real time\n  const winSize = useWindowDimensions();\n\n  //inizializzo databse e autenticazione firebase\n  const db = getFirestore();\n  const auth = getAuth();\n\n  //state con array di immagini da caricare\n  let [images, setImages] = React.useState([]);\n\n  //state con array di cartelle da caricare\n  let [folders, setFolders] = React.useState([]);\n\n  //state per gestire cartelle\n  let [stackDir, setStackDir] = React.useState([\"Photos\"]);\n\n  //state per gestire barra caricamento\n  let [progressValue, setProgressValue] = React.useState({\n    value: 0,\n    total: 100,\n  });\n\n  //inizializzo overlay caricamento\n  let [spinnerVisible, setSpinnerVisibile] = React.useState(false);\n\n  //per non mostrare pulsante durante reload e primo caricamento\n  let [reload, setReload] = React.useState(false);\n\n  //state apertura menu\n  let [menuOpen, setMenuOpen] = React.useState(false);\n\n  //numero file da caricare\n  let [numFile, setNumFile] = React.useState({ current: 0, total: 0 });\n\n  //per gestire poi il modal del menu del file o cartella\n  let [elementoSelezionato, setElementoSelezionato] = React.useState({});\n\n  //per selezionare il modal da mostrare 1=file 2 =folders 0=niente\n  let [valueModal, setValueModal] = React.useState(0);\n\n  let aggiornaFoto = function (newPhotoId) {\n    return new Promise(async (resolve, reject) => {\n      if (!mutexFoto) {\n        mutexFoto = true;\n\n        //prendo i cid da firebase prendo il zip dall url ipfs + cid lo unzippo e creo il blob per mostrarlo\n        let data = await getDocs(\n          query(\n            collection(\n              db,\n              \"Utenti\",\n              route.params.email.replaceAll(\".\", \"DOT\"),\n              \"Photos\"\n            ),\n            orderBy(\"data\", \"desc\"),\n            where(\"dir\", \"==\", stackDir)\n          )\n        );\n\n        //carico cartelle\n        setFolders([]);\n        let listFold = await getDocs(\n          query(\n            collection(\n              db,\n              \"Utenti\",\n              route.params.email.replaceAll(\".\", \"DOT\"),\n              \"folders\"\n            ),\n            where(\"dir\", \"==\", stackDir)\n          )\n        );\n\n        //carico nome cartelle nello state\n        for (let j = 0; j < listFold.docs.length; j++) {\n          setFolders((oldFolders) => [\n            ...oldFolders,\n            {\n              id: listFold.docs[j].id,\n              name: listFold.docs[j].data().name,\n              data: listFold.docs[j].data().data,\n            },\n          ]);\n        }\n\n        //uso questa i per sbloccare il mutex solo quando il fetch ha finito e sono state caricate\n        //tutte le foto\n        let i = 0;\n\n        //sblocco il mutex se se è vuota la lista\n        if (data.docs.length == 0) resolve();\n\n        for (i; i < data.docs.length; i++) {\n          //controllo se non è già presente nello state altrimenti ogni volta ad esempio che carichi un nuova foto\n          //ricarica tutto\n          if (\n            !images.includes(\n              images.filter((obj) => obj.id === data.docs[i].id)[0]\n            )\n          ) {\n            let item = {\n              cid: data.docs[i].data().cid,\n              data: data.docs[i].data().data,\n              id: data.docs[i].id,\n              name: data.docs[i].data().name,\n              type: data.docs[i].data().type,\n              size: data.docs[i].data().size,\n              //Assegno un altezza a caso per il rendering\n              ranHeightImage:\n                Math.random() < 0.5\n                  ? undefined\n                  : winSize.width < 900\n                  ? hp(\"20%\")\n                  : hp(\"25%\"),\n            };\n            try {\n              item.notPrivate = data.docs[i].data().notPrivate;\n            } catch (err) {}\n\n            //se viene aggiunta una nuova immagine la metto all'inizio dellarray e poi esco dal for\n            //in modo che carico solo le nuove immagini e non ripeteo il caricamento delle altre gia presenti\n            if (data.docs[i].id == newPhotoId) {\n              setImages((oldArray) => [item, ...oldArray]);\n              i = data.docs.length;\n            } else {\n              setImages((oldArray) => [...oldArray, item]);\n            }\n\n            //sblocco il mutex se sono state caricate tutte le foto\n            if (data.docs.length - 1 == i) {\n              resolve();\n            }\n          } else {\n            //se è gia presente l'immagine\n\n            //sblocco il mutex se sono state caricate tutte le foto\n            if (data.docs.length - 1 == i) {\n              resolve();\n            }\n          }\n        }\n      }\n      resolve();\n    });\n  };\n\n  //Eseguito Appena si apre la pagina e quando premo pulsante reload\n  React.useEffect(async () => {\n    if (images.length == 0) {\n      setSpinnerVisibile(true);\n      setReload(true);\n      aggiornaFoto().then(() => {\n        mutexFoto = false;\n        setSpinnerVisibile(false);\n        setReload(false);\n      });\n    }\n  }, [images]);\n\n  //eseguito quando cambia elemento selezionato\n  React.useEffect(() => {\n    //per gestire il click diretto sul file o sulla cartella, senza passare per il modal\n    if (elementoSelezionato.modalita == \"diretta\") {\n      if (elementoSelezionato.size != undefined) menuSelection(1);\n      else menuSelectionFolder(3);\n    }\n  }, [elementoSelezionato]);\n\n  //picker immagini\n  let openImagePickerAsync = async (selectedResult) => {\n    //alert per scelta upload files pubblici o privati\n    let response = confirm(\n      \"Do you want upload private (encrypted) or public (not encrypted) files? ('OK' for private, 'Cancel' for public)\"\n    );\n\n    //per alert conferma caricamento tutti i file\n    let errorLoading = false;\n\n    for (let i = 0; i < selectedResult.length; i++) {\n      //metto rotellina\n      setReload(true);\n      //metto overlay caricamneto\n      setSpinnerVisibile(true);\n      //per segnare durante il caricamento quale file si sta caricando\n      setNumFile({ current: i + 1, total: selectedResult.length });\n\n      //se è privato lo cifro altrimenti non lo cifro\n      let filebuffer;\n      if (response) {\n        let enc = new TextEncoder();\n        //allungo la password inserendo k perchè deve essere almeno essere lunga 16 per generare la chiave\n        let passwordKey = route.params.password;\n        while (passwordKey.length < 16) passwordKey += \"k\";\n\n        //genero key con la password\n        let key = await window.crypto.subtle.importKey(\n          \"raw\",\n          enc.encode(passwordKey),\n          \"AES-GCM\",\n          false,\n          [\"encrypt\", \"decrypt\"]\n        );\n\n        //cifro il file\n        filebuffer = await window.crypto.subtle.encrypt(\n          { name: \"AES-GCM\", iv: enc.encode(passwordKey) },\n          key,\n          await selectedResult[i].arrayBuffer()\n        );\n      } else {\n        filebuffer = await selectedResult[i].arrayBuffer();\n      }\n\n      //levo rotellina\n      setReload(false);\n      //resetto la progress bar\n      setProgressValue({ value: 0, total: 100 });\n\n      //id file per il catch\n      let idFile;\n\n      try {\n        /*let json;\n        if ((selectedResult[i].size / 1000000).toFixed(2) < 100) {\n          json = await axios.request({\n            url: \"https://api.web3.storage/upload\",\n            method: \"POST\",\n            signal: controllerFetch.signal,\n            headers: {\n              Authorization: \"Bearer \" + config.Web3StorageToken,\n            },\n            data: cifrato,\n            onUploadProgress: (prog) => {\n              setProgressValue({ value: prog.loaded, total: prog.total });\n            },\n          });\n        } else {\n          /* let BlobCifrato = new Blob([cifrato]);\n            const blockstore = new Blockstore();\n            const { root: cid } = await pack({\n              input: [{ path: \"blob\", content: BlobCifrato.stream() }],\n              blockstore: blockstore,\n              wrapWithDirectory: false,\n            });\n            const car = new BlockstoreCarReader(1, [cid], blockstore);\n\n            const targetSize = 1024 * 1024 * 10;\n            const splitter =\n              car instanceof Blob\n                ? await TreewalkCarSplitter.fromBlob(car, targetSize)\n                : new TreewalkCarSplitter(car, targetSize);\n\n            //li uso per la barra di caricamento\n            let counterCars = 0;\n            for await (const cid of splitter.cars()) {\n              counterCars++;\n            }\n            let caricati = 0;\n\n            const upload = transform(3, async function (car) {\n              const carParts = [];\n              for await (const part of car) {\n                carParts.push(part);\n              }\n              const carFile = new Blob(carParts, { type: \"application/car\" });\n\n              const response = await axios.request({\n                onUploadProgress: (event) => {\n                  setProgressValue({\n                    value: event.loaded,\n                    total: event.total,\n                  });\n                },\n                url: /*\"https://api.nft.storage/upload\"*/\n        /* \"https://api.web3.storage/car\",\n                method: \"POST\",\n                signal: controllerFetch.signal,\n                headers: {\n                  \"content-Type\": \"application/car\",\n                  Authorization:*/\n        /*\"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDgyNTY0MzFEQUYwMjU4MEFENTU5NDU2NDc0OURhQWJCZTY5NWUzRjkiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY0Mjg3NjE3NTM0OCwibmFtZSI6ImRzdG9yYWdlIn0.TeG3_YYxhZeWtzpPPNxoietTB0yezr_Pqvq30yjao5w\",*/\n        /* \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDg3RTZiZDFhYTUyOUNmYWRmOURhMGY0NTNiMEE4ZDlGRDM3MjM2ZUIiLCJpc3MiOiJ3ZWIzLXN0b3JhZ2UiLCJpYXQiOjE2NDU0NTQ1NTcyNjUsIm5hbWUiOiJEUGhvdG8ifQ.WM4zuZ9UuGwODetDm37xMmpPLkCXXai-wAxw9Opf7Yk\",\n                },\n                data: carFile,\n              });\n\n              return response.data.value.cid;\n            });\n\n            let root;\n            for await (const cid of upload(splitter.cars())) {\n              //aggiorno progresso caricamento\n              caricati = caricati + 1;\n              setProgressValue({ value: caricati, total: counterCars });\n              root = cid;\n            }\n\n            json = cid.toString();*/\n\n        /* let BlobCifrato = new Blob([cifrato]);\n          const blockstore = new Blockstore();\n          const { root: cid, out: iterable } = await pack({\n            input: [{ path: \"blob\", content: BlobCifrato.stream() }],\n            blockstore: blockstore,\n            wrapWithDirectory: false,\n          });\n          const car = await CarReader.fromIterable(iterable);\n          const targetSize = 100000000;\n          const splitter = new TreewalkCarSplitter(car, targetSize);\n\n          //li uso per la barra di caricamento\n          let counterCars = Math.floor(BlobCifrato.size / targetSize);\n          let caricati = 0;\n          console.log(counterCars);\n\n          const upload = transform(3, async function (smallCar) {\n            const carParts = [];\n            for await (const part of smallCar) {\n              carParts.push(part);\n            }\n            const carFile = new Blob(carParts, { type: \"application/car\" });\n\n            const response = await axios.request({\n              url: \"https://api.web3.storage/car\",\n              method: \"POST\",\n              signal: controllerFetch.signal,\n              headers: {\n                \"content-Type\": \"application/car\",\n                Authorization: \"Bearer \" + config.Web3StorageToken,\n              },\n              data: carFile,\n            });\n          });\n\n          for await (const cid of upload(splitter.cars())) {\n            //aggiorno progresso caricamento\n            caricati = caricati + 1;\n            setProgressValue({ value: caricati, total: counterCars });\n          }\n\n        json = cid.toString();\n         }*/\n\n        //carico file su web3.storage\n        let caricato = 0;\n        const file = new File([filebuffer], \"file\");\n        const json = await web3s.put([file], {\n          wrapWithDirectory: false,\n          onStoredChunk: (size) => {\n            //aggiorno lo stato del caricamento\n            caricato = Math.floor(caricato + size);\n\n            if (caricato > file.size)\n              setProgressValue({ value: file.size, total: file.size });\n            else setProgressValue({ value: caricato, total: file.size });\n          },\n          controllerFetch,\n        });\n\n        //aggiungo cid  a firebase\n        let el = await addDoc(\n          collection(\n            db,\n            \"Utenti\",\n            route.params.email.replaceAll(\".\", \"DOT\"),\n            \"Photos\"\n          ),\n          {\n            cid:\n              /*cid.ipnft*/ json.data == undefined\n                ? json\n                : json.data /*.value*/.cid,\n            data: Date.now(),\n            name: selectedResult[i].name,\n            type:\n              selectedResult[i].name.substring(\n                selectedResult[i].name.lastIndexOf(\".\") + 1\n              ) == \"rar\" ||\n              selectedResult[i].name.substring(\n                selectedResult[i].name.lastIndexOf(\".\") + 1\n              ) == \"zip\"\n                ? \"application/zip\"\n                : selectedResult[i].type,\n            size: selectedResult[i].size,\n            dir: stackDir,\n            notPrivate: !response,\n          }\n        );\n\n        idFile = el.id;\n\n        await aggiornaFoto(el.id)\n          .then(() => {\n            mutexFoto = false;\n            setSpinnerVisibile(false);\n            setReload(false);\n          })\n          .catch((err) => {\n            mutexFoto = false;\n\n            alert(\"Loading file cancelled\");\n\n            //tolgo overlay caricamneto\n            setSpinnerVisibile(false);\n\n            //annullo tutti i caricamenti in coda\n            i = selectedResult.length;\n          });\n      } catch (err) {\n        //cosi annullo tutti i caricamenti in coda\n        i = selectedResult.length;\n\n        errorLoading = true;\n\n        try {\n          //elimino da firebase\n          await deleteDoc(\n            doc(\n              db,\n              \"Utenti\",\n              route.params.email.replaceAll(\".\", \"DOT\"),\n              \"Photos\",\n              idFile\n            )\n          );\n        } catch (ert) {}\n\n        controllerFetch = new AbortController();\n\n        web3s = new Web3Storage();\n\n        console.log(err);\n        alert(\"Loading failed\");\n        //tolgo overlay caricamneto\n        setSpinnerVisibile(false);\n        setReload(false);\n      }\n    }\n    if (!errorLoading) alert(\"All files have been uploaded successfully\");\n  };\n\n  let createFolder = async () => {\n    let nameFolder = window.prompt(\"Enter the name of the folder\");\n\n    if (nameFolder != null && nameFolder != \"\") {\n      await addDoc(\n        collection(\n          db,\n          \"Utenti\",\n          route.params.email.replaceAll(\".\", \"DOT\"),\n          \"folders\"\n        ),\n        {\n          name: nameFolder,\n          data: Date.now(),\n          dir: stackDir,\n        }\n      );\n\n      setSpinnerVisibile(true);\n      setReload(true);\n      await aggiornaFoto().then(() => {\n        mutexFoto = false;\n        setSpinnerVisibile(false);\n        setReload(false);\n      });\n    }\n  };\n\n  //menu al click della foto\n  let menuSelection = async (value) => {\n    //copy link per file pubblici\n    if (value == 5) {\n      copy(\"https://\" + elementoSelezionato.cid + \".ipfs.dweb.link\");\n\n      alert(\"Link copied to clipboard\");\n    }\n\n    //info file\n    if (value == 4) {\n      navigation.push(\"FileInfo\", {\n        email: route.params.email,\n        name: elementoSelezionato.name,\n        size: elementoSelezionato.size,\n        data: elementoSelezionato.data,\n        cid: elementoSelezionato.cid,\n      });\n    }\n\n    //Elimina foto\n    if (value == 2) {\n      //elimino da firebase\n      await deleteDoc(\n        doc(\n          db,\n          \"Utenti\",\n          route.params.email.replaceAll(\".\", \"DOT\"),\n          \"Photos\",\n          elementoSelezionato.id\n        )\n      );\n\n      //elimino dallo state\n      let newImages = Object.assign([], images); //si fa così per creare una copia dell'array nello stato\n      newImages.splice(\n        newImages.indexOf(\n          newImages.filter((obj) => obj.id === elementoSelezionato.id)[0]\n        ),\n        1\n      );\n      setImages(newImages);\n    }\n\n    //Download foto\n    if (value == 1) {\n      if (!elementoSelezionato.notPrivate) {\n        let win;\n\n        if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent))\n          win = window;\n        else win = window.open();\n\n        win.window.document.write(\n          \"<html>  <head>    <style>      html,      body {        height: 100%;        width: 100%;      }      .container {        align-items: center;        display: flex;        justify-content: center;        height: 100%;        width: 100%;      }    </style>  </head>  <body style='background-color: #191919; overflow: hidden'>    <div class='container'>      <img src='https://darchive5.web.app/static/media/logo.a7ce87a3.png' style='width: 250px' />      <div class='content'>        <p          id='textDownload'          style='color: white; font-family: Arial, Helvetica, sans-serif'        >          Download of \" +\n            elementoSelezionato.name +\n            \" in progress...        </p>      </div>    </div>  </body></html>\"\n        );\n\n        //se chiudo la finestra eseguo abort del download\n        win.window.addEventListener(\"beforeunload\", (ev) => {\n          controllerFetchDownload.abort();\n          controllerFetchDownload = new AbortController();\n        });\n\n        axios\n          .get(\n            /* \"https://ipfs.io/ipfs/\" + elementoSelezionato.cid */ \"https://\" +\n              elementoSelezionato.cid +\n              \".ipfs.dweb.link\",\n            {\n              signal: controllerFetchDownload.signal,\n              responseType: \"arraybuffer\",\n              onDownloadProgress: (event) => {\n                win.document.getElementById(\"textDownload\").innerHTML =\n                  \"Download of \" +\n                  elementoSelezionato.name +\n                  \" in progress...\" +\n                  \" \" +\n                  event.loaded +\n                  \"/\" +\n                  event.total;\n              },\n            }\n          )\n          .then(async (arrayBuffer) => {\n            let enc = new TextEncoder();\n            //allungo la password inserendo k perchè deve essere almeno essere lunga 16 per generare la chiave\n            let passwordKey = route.params.password;\n            console.log(\"key:\"+passwordKey);\n            while (passwordKey.length < 16) passwordKey += \"k\";\n            console.log(\"key:\"+passwordKey);\n\n            //genero key con la password\n            let key = await window.crypto.subtle.importKey(\n              \"raw\",\n              enc.encode(passwordKey),\n              \"AES-GCM\",\n              false,\n              [\"encrypt\", \"decrypt\"]\n            );         \n            console.log(\"key:\"+passwordKey);\n\n\n            //decifro il file\n            let decifrato = await window.crypto.subtle.decrypt(\n              { name: \"AES-GCM\", iv: enc.encode(passwordKey) },\n              key,\n              arrayBuffer.data\n            );\n\n            //se è un immagine o un video lo faccio visualizzare\n            //altrimenti lo scarico dandogli il nome del file giusto\n            if (\n              elementoSelezionato.type.includes(\"image\") ||\n              elementoSelezionato.type.includes(\"video\")\n            ) {\n              let blob = new Blob([decifrato], {\n                type: elementoSelezionato.type,\n              });\n              let url = URL.createObjectURL(blob);\n              win.location.href = url;\n            } else {\n              //scarico il file\n              var a = win.document.createElement(\"a\");\n              let blob = new Blob([decifrato], {\n                type: elementoSelezionato.type,\n              });\n              let url = URL.createObjectURL(blob);\n              a.setAttribute(\"href\", url);\n              a.setAttribute(\"download\", elementoSelezionato.name);\n              win.document.body.append(a);\n              a.click();\n              win.window.URL.revokeObjectURL(url);\n              a.remove();\n            }\n          })\n          .catch((err) => {\n            //errore durante il download\n            if (err.message != \"canceled\") {\n              alert(\"Error during downloading \" + elementoSelezionato.name);\n              win.document.getElementById(\"textDownload\").innerHTML =\n                \"Error during downloading \" + elementoSelezionato.name;\n            }\n          });\n      } else {\n        let win;\n\n        if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent))\n          win = window;\n        else win = window.open();\n\n        win.window.document.write(\n          \"<html>  <head>    <style>      html,      body {        height: 100%;        width: 100%;      }      .container {        align-items: center;        display: flex;        justify-content: center;        height: 100%;        width: 100%;      }    </style>  </head>  <body style='background-color: #191919; overflow: hidden'>    <div class='container'>      <img src='https://darchive5.web.app/static/media/logo.a7ce87a3.png' style='width: 250px' />      <div class='content'>        <p          id='textDownload'          style='color: white; font-family: Arial, Helvetica, sans-serif'        >          Download of \" +\n            elementoSelezionato.name +\n            \" in progress...        </p>      </div>    </div>  </body></html>\"\n        );\n\n        //se chiudo la finestra eseguo abort del download\n        win.window.addEventListener(\"beforeunload\", (ev) => {\n          controllerFetchDownload.abort();\n          controllerFetchDownload = new AbortController();\n        });\n\n        axios\n          .get(\n            /* \"https://ipfs.io/ipfs/\" + elementoSelezionato.cid */ \"https://\" +\n              elementoSelezionato.cid +\n              \".ipfs.dweb.link\",\n            {\n              signal: controllerFetchDownload.signal,\n              responseType: \"arraybuffer\",\n              onDownloadProgress: (event) => {\n                win.document.getElementById(\"textDownload\").innerHTML =\n                  \"Download of \" +\n                  elementoSelezionato.name +\n                  \" in progress...\" +\n                  \" \" +\n                  event.loaded +\n                  \"/\" +\n                  event.total;\n              },\n            }\n          )\n          .then(async (arrayBuffer) => {\n            //scarico il file\n            var a = win.document.createElement(\"a\");\n            let blob = new Blob([arrayBuffer.data], {\n              type: elementoSelezionato.type,\n            });\n            let url = URL.createObjectURL(blob);\n            a.setAttribute(\"href\", url);\n            a.setAttribute(\"download\", elementoSelezionato.name);\n            win.document.body.append(a);\n            a.click();\n            win.window.URL.revokeObjectURL(url);\n            a.remove();\n          })\n          .catch((err) => {\n            //errore durante il download\n            if (err.message != \"canceled\") {\n              alert(\"Error during downloading \" + elementoSelezionato.name);\n              win.document.getElementById(\"textDownload\").innerHTML =\n                \"Error during downloading \" + elementoSelezionato.name;\n            }\n          });\n      }\n    }\n\n    //rinomina file\n    if (value == 3) {\n      let newName = window.prompt(\"Enter new name\");\n      if (newName != null && newName.trim() != \"\") {\n        //rinomino oggetto in state\n        let newImages = Object.assign([], images); //si fa così per creare una copia dell'array nello stato\n        let newObject = newImages.filter(\n          (obj) => obj.id === elementoSelezionato.id\n        )[0];\n        let estenzione = newObject.name.slice(newObject.name.lastIndexOf(\".\"));\n        newObject.name = newName.trim() + estenzione;\n        newImages[\n          newImages.indexOf(\n            newImages.filter((obj) => obj.id === elementoSelezionato.id)[0]\n          )\n        ] = newObject;\n        setImages(newImages);\n\n        //rinomino su firebase\n        await updateDoc(\n          doc(\n            db,\n            \"Utenti\",\n            route.params.email.replaceAll(\".\", \"DOT\"),\n            \"Photos\",\n            elementoSelezionato.id\n          ),\n          { name: newName.trim() + estenzione }\n        );\n      }\n    }\n  };\n\n  //menu al click della cartella\n  let menuSelectionFolder = async (value) => {\n    //Elimina folder\n    if (value == 2) {\n      //controllo se la cartella contiene cartelle\n      let controllo1 = await getDocs(\n        query(\n          collection(\n            db,\n            \"Utenti\",\n            route.params.email.replaceAll(\".\", \"DOT\"),\n            \"folders\"\n          ),\n          where(\"dir\", \"array-contains\", elementoSelezionato.id)\n        )\n      );\n\n      //controllo se la cartella contiene file\n      let controllo2 = await getDocs(\n        query(\n          collection(\n            db,\n            \"Utenti\",\n            route.params.email.replaceAll(\".\", \"DOT\"),\n            \"Photos\"\n          ),\n          where(\"dir\", \"array-contains\", elementoSelezionato.id)\n        )\n      );\n\n      //elimino se la cartella è vuota\n      if (controllo1.size == 0 && controllo2.size == 0) {\n        //elimino da firebase\n        await deleteDoc(\n          doc(\n            db,\n            \"Utenti\",\n            route.params.email.replaceAll(\".\", \"DOT\"),\n            \"folders\",\n            elementoSelezionato.id\n          )\n        );\n\n        //elimino dallo state\n        let newFolders = Object.assign([], folders); //si fa così per creare una copia dell'array nello stato\n        newFolders.splice(\n          newFolders.indexOf(\n            newFolders.filter((obj) => obj.id === elementoSelezionato.id)[0]\n          ),\n          1\n        );\n        setFolders(newFolders);\n      } else {\n        alert(\"The folder must be empty\");\n      }\n    }\n\n    //apro cartella\n    if (value == 3) {\n      setStackDir((oldStack) => [...oldStack, elementoSelezionato.id]);\n\n      setImages([]);\n    }\n\n    //rinomino cartella\n    if (value == 1) {\n      let newName = window.prompt(\"Enter new name\");\n      if (newName != null && newName.trim() != \"\") {\n        //rinomino oggetto in state\n        let newFolders = Object.assign([], folders); //si fa così per creare una copia dell'array nello stato\n        let newObject = newFolders.filter(\n          (obj) => obj.id === elementoSelezionato.id\n        )[0];\n        newObject.name = newName.trim();\n        newFolders[\n          newFolders.indexOf(\n            newFolders.filter((obj) => obj.id === elementoSelezionato.id)[0]\n          )\n        ] = newObject;\n        setFolders(newFolders);\n\n        //rinomino su firebase\n        await updateDoc(\n          doc(\n            db,\n            \"Utenti\",\n            route.params.email.replaceAll(\".\", \"DOT\"),\n            \"folders\",\n            elementoSelezionato.id\n          ),\n          { name: newName.trim() }\n        );\n      }\n    }\n  };\n\n  ///////////////RENDER IMMAGINI/////////////////////////////////////\n  const Item = ({ data, cid, id, name, size, type, notPrivate }) => {\n    return (\n      //Menu  compare alla pressione dell'immagine\n      <TouchableOpacity\n        onPress={() => {\n          setElementoSelezionato({\n            id: id,\n            cid: cid,\n            type: type,\n            name: name,\n            size: size,\n            data: data,\n            notPrivate: notPrivate,\n            modalita: \"diretta\",\n          });\n        }}\n      >\n        <View\n          style={{\n            padding: winSize.width < 900 ? hp(\"2%\") : hp(\"3%\"),\n          }}\n        >\n          <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\n            {/*Immagine */}\n            <Image\n              source={\n                notPrivate\n                  ? require(\"./assets/filePublic.png\")\n                  : require(\"./assets/file.png\")\n              }\n              cacheKey={cid}\n              style={{\n                width: \"90px\",\n                aspectRatio: 0.7,\n                height: \"110px\",\n                borderRadius: hp(\"5%\"),\n                alignSelf: \"stretch\",\n              }}\n            />\n\n            {/*nome file */}\n            <Text\n              style={{\n                color: \"white\",\n                width: \"25%\",\n                fontWeight: \"bold\",\n                marginLeft: \"3%\",\n              }}\n            >\n              {name}\n            </Text>\n\n            {/*size  + data*/}\n            <Text\n              style={{\n                color: \"white\",\n                width: \"25%\",\n                fontWeight: 200,\n                marginLeft: \"10%\",\n              }}\n            >\n              {\"Size : \" +\n                (size / 1000000).toFixed(2) +\n                \"MB Loading date: \" +\n                new Date(data).toLocaleString()}\n            </Text>\n\n            {/*Icona per aprire impostazioni file */}\n            <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n              <TouchableOpacity\n                onPress={() => {\n                  setElementoSelezionato({\n                    id: id,\n                    cid: cid,\n                    type: type,\n                    name: name,\n                    size: size,\n                    data: data,\n                    notPrivate: notPrivate,\n                  });\n                  setValueModal(1);\n                }}\n              >\n                <Icon name=\"dots-vertical\" color={\"white\"} size={30} />\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n      </TouchableOpacity>\n    );\n  };\n\n  const renderItem = ({ item }) => (\n    <Item\n      data={item.data}\n      cid={item.cid}\n      id={item.id}\n      name={item.name}\n      size={item.size}\n      type={item.type}\n      notPrivate={item.notPrivate}\n    />\n  );\n\n  //////////////////////////////////////////////////////////////////\n\n  ///////////////RENDER Cartelle/////////////////////////////////////\n  const Itemfolder = ({ id, data, name }) => {\n    return (\n      //Menu  compare alla pressione dell'immagine\n      <TouchableOpacity\n        onPress={() => {\n          setElementoSelezionato({\n            id: id,\n            modalita: \"diretta\",\n          });\n        }}\n        style={{\n          padding: winSize.width < 900 ? hp(\"2%\") : hp(\"3%\"),\n        }}\n      >\n        <View>\n          <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\n            {/*Immagine */}\n            <Image\n              source={require(\"./assets/folder.png\")}\n              cacheKey={name}\n              style={{\n                width: \"90px\",\n                aspectRatio: 0.7,\n                height: \"110px\",\n                borderRadius: hp(\"5%\"),\n                alignSelf: \"stretch\",\n              }}\n            />\n            <Text\n              style={{\n                color: \"white\",\n                width: \"25%\",\n                fontWeight: \"bold\",\n                marginLeft: \"3%\",\n              }}\n            >\n              {name}\n            </Text>\n            <Text\n              style={{\n                color: \"white\",\n                width: \"25%\",\n                fontWeight: 200,\n                marginLeft: \"10%\",\n              }}\n            >\n              {\"Creation date: \" + new Date(data).toLocaleString()}\n            </Text>\n\n            {/*Icona per aprire impostazioni file */}\n            <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n              <TouchableOpacity\n                onPress={() => {\n                  setElementoSelezionato({\n                    name: name,\n                    id: id,\n                  });\n                  setValueModal(2);\n                }}\n              >\n                <Icon name=\"dots-vertical\" color={\"white\"} size={30} />\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n      </TouchableOpacity>\n    );\n  };\n\n  const renderItemFolder = ({ item }) => (\n    <Itemfolder id={item.id} data={item.data} name={item.name} />\n  );\n\n  //////////////////////////////////////////////////////////////////\n\n  return (\n    <View\n      style={{\n        width: \"flex\",\n        height: \"100%\",\n        backgroundColor: \"#191919\",\n        alignItems: \"center\",\n      }}\n    >\n      {/*Modal opzioni file */}\n      <Modal visible={valueModal == 1 ? true : false} transparent={true}>\n        <View\n          style={{\n            backgroundColor: \"rgba(0, 0, 0, 0.5)\",\n            flex: 1,\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            height: \"100%\",\n          }}\n        >\n          <View\n            style={{\n              backgroundColor: \"#2b2b2b\",\n              borderRadius: \"5%\",\n              width: winSize.width > 900 ? \"50%\" : \"80%\",\n              height: winSize.width > 900 ? \"70%\" : \"70%\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            {/*Nome file */}\n            <Text\n              style={{\n                textAlign: \"center\",\n                color: \"white\",\n                fontWeight: \"100\",\n                fontSize: \"30px\",\n                width: \"80%\",\n              }}\n            >\n              {elementoSelezionato.name}\n            </Text>\n\n            {/*Tasto download */}\n            <TouchableOpacity\n              onPress={() => {\n                menuSelection(1);\n                setValueModal(0);\n              }}\n              style={{ marginTop: winSize.width > 900 ? \"3%\" : \"7%\" }}\n            >\n              <Text style={{ color: \"white\", fontSize: \"25px\" }}>Download</Text>\n            </TouchableOpacity>\n\n            {elementoSelezionato.notPrivate != undefined &&\n            elementoSelezionato.notPrivate == true ? (\n              //tasto copy link\n              <TouchableOpacity\n                onPress={() => {\n                  menuSelection(5);\n                  setValueModal(0);\n                }}\n                style={{ marginTop: winSize.width > 900 ? \"3%\" : \"7%\" }}\n              >\n                <Text style={{ color: \"white\", fontSize: \"25px\" }}>\n                  Copy link\n                </Text>\n              </TouchableOpacity>\n            ) : null}\n\n            {/*Tasto rename */}\n            <TouchableOpacity\n              style={{ marginTop: winSize.width > 900 ? \"3%\" : \"7%\" }}\n              onPress={() => {\n                menuSelection(3);\n                setValueModal(0);\n              }}\n            >\n              <Text style={{ color: \"white\", fontSize: \"25px\" }}>Rename</Text>\n            </TouchableOpacity>\n\n            {/*Tasto Info */}\n            <TouchableOpacity\n              style={{ marginTop: winSize.width > 900 ? \"3%\" : \"7%\" }}\n              onPress={() => {\n                menuSelection(4);\n                setValueModal(0);\n              }}\n            >\n              <Text style={{ color: \"white\", fontSize: \"25px\" }}>Info</Text>\n            </TouchableOpacity>\n\n            {/*Tasto delete */}\n            <TouchableOpacity\n              style={{ marginTop: winSize.width > 900 ? \"3%\" : \"7%\" }}\n              onPress={() => {\n                menuSelection(2);\n                setValueModal(0);\n              }}\n            >\n              <Text style={{ color: \"red\", fontSize: \"25px\" }}>Delete</Text>\n            </TouchableOpacity>\n\n            {/*Tasto chiudere modal */}\n            <TouchableOpacity\n              style={{ marginTop: winSize.width > 900 ? \"3%\" : \"7%\" }}\n              onPress={() => {\n                setValueModal(0);\n              }}\n            >\n              <Icon name=\"close\" color={\"#ff5c5c\"} size={30} />\n            </TouchableOpacity>\n          </View>\n        </View>\n      </Modal>\n\n      {/*Modal opzioni folders */}\n      <Modal visible={valueModal == 2 ? true : false} transparent={true}>\n        <View\n          style={{\n            backgroundColor: \"rgba(0, 0, 0, 0.5)\",\n            flex: 1,\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            height: \"100%\",\n          }}\n        >\n          <View\n            style={{\n              backgroundColor: \"#2b2b2b\",\n              borderRadius: \"5%\",\n              width: winSize.width > 900 ? \"50%\" : \"80%\",\n              height: winSize.width > 900 ? \"50%\" : \"60%\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            {/*Nome file */}\n            <Text\n              style={{\n                textAlign: \"center\",\n                color: \"white\",\n                fontWeight: \"100\",\n                fontSize: \"30px\",\n                width: \"80%\",\n              }}\n            >\n              {elementoSelezionato.name}\n            </Text>\n\n            {/*Tasto Open */}\n            <TouchableOpacity\n              onPress={() => {\n                menuSelectionFolder(3);\n                setValueModal(0);\n              }}\n              style={{ marginTop: winSize.width > 900 ? \"3%\" : \"7%\" }}\n            >\n              <Text style={{ color: \"white\", fontSize: \"25px\" }}>Open</Text>\n            </TouchableOpacity>\n\n            {/*Tasto rename */}\n            <TouchableOpacity\n              style={{ marginTop: winSize.width > 900 ? \"3%\" : \"7%\" }}\n              onPress={() => {\n                menuSelectionFolder(1);\n                setValueModal(0);\n              }}\n            >\n              <Text style={{ color: \"white\", fontSize: \"25px\" }}>Rename</Text>\n            </TouchableOpacity>\n\n            {/*Tasto delete */}\n            <TouchableOpacity\n              style={{ marginTop: winSize.width > 900 ? \"3%\" : \"7%\" }}\n              onPress={() => {\n                menuSelectionFolder(2);\n                setValueModal(0);\n              }}\n            >\n              <Text style={{ color: \"red\", fontSize: \"25px\" }}>Delete</Text>\n            </TouchableOpacity>\n\n            {/*Tasto chiudere modal */}\n            <TouchableOpacity\n              style={{ marginTop: winSize.width > 900 ? \"3%\" : \"7%\" }}\n              onPress={() => {\n                setValueModal(0);\n              }}\n            >\n              <Icon name=\"close\" color={\"#ff5c5c\"} size={30} />\n            </TouchableOpacity>\n          </View>\n        </View>\n      </Modal>\n\n      {/*Floating menu */}\n      <FloatingMenu\n        position=\"top-left\"\n        iconColor={\"#ff5c5c\"}\n        borderColor={\"#ff5c5c\"}\n        backgroundDownColor={\"#ff5c5c\"}\n        isOpen={menuOpen}\n        items={[\n          { label: \"Info\" },\n          { label: \"Reload\" },\n          { label: \"Create new folder\" },\n          { label: \"Upload\" },\n        ]}\n        onMenuToggle={() => {\n          setMenuOpen(!menuOpen);\n        }}\n        onItemPress={(item, index) => {\n          if (index == 0) {\n            document.getElementById(\"fileLoad\").click();\n            setMenuOpen(false);\n          }\n          if (index == 1) {\n            createFolder();\n            setMenuOpen(false);\n          }\n          if (index == 2) {\n            setImages([]);\n            setMenuOpen(false);\n          }\n          if (index == 3) {\n            navigation.push(\"Settings\", {\n              email: route.params.email,\n              password: route.params.password,\n            });\n          }\n        }}\n        renderItemIcon={(item, index) => {\n          if (index == 0)\n            return (\n              <Icon name=\"file-document-outline\" color={\"#ff5c5c\"} size={20} />\n            );\n          if (index == 1)\n            return (\n              <Icon name=\"folder-plus-outline\" color={\"#ff5c5c\"} size={20} />\n            );\n          if (index == 2)\n            return <Icon name=\"reload\" color={\"#ff5c5c\"} size={20} />;\n          if (index == 3)\n            return (\n              <Icon name=\"information-outline\" color={\"#ff5c5c\"} size={20} />\n            );\n        }}\n      />\n      {/*overlay loading */}\n      <Spinner\n        visible={spinnerVisible}\n        textStyle={{ color: \"white\" }}\n        children={\n          <View\n            style={{\n              width: \"100%\",\n              height: \"100%\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            {/*Spinner */}\n            {reload ? (\n              <ActivityIndicator\n                color={\"white\"}\n                size={\"large\"}\n              ></ActivityIndicator>\n            ) : (\n              <View\n                style={{\n                  height: \"40%\",\n                  borderRadius: hp(\"5%\"),\n                  backgroundColor: \"#2b2b2b\",\n                  width: winSize.width < 900 ? \"70%\" : \"30%\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                }}\n              >\n                {/*Testo numero file in caricamento */}\n                <Text\n                  style={{\n                    fontWeight: 200,\n                    color: \"white\",\n                    fontWeight: \"bold\",\n                    marginBottom: \"8%\",\n                  }}\n                >\n                  {\"Loading file \" + numFile.current + \" of \" + numFile.total}\n                </Text>\n\n                {/*Testo progress bar */}\n                <Text style={{ fontWeight: 200, color: \"white\" }}>\n                  {Math.floor(\n                    (progressValue.value / progressValue.total) * 100\n                  ) +\n                    \" / \" +\n                    100}\n                </Text>\n\n                {/*Progress bar */}\n                <Progress.Bar\n                  style={{ backgroundColor: \"white\" }}\n                  progress={progressValue.value / progressValue.total}\n                  width={200}\n                  color=\"black\"\n                />\n\n                {/*Tasto annulla caricamento lo mostro solo se è un caricamento di aggiunta foto*/}\n                <TouchableOpacity\n                  style={{\n                    backgroundColor: \"#ff5c5c\",\n                    width: \"150px\",\n                    height: \"50px\",\n                    marginTop: hp(\"5%\"),\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                  }}\n                  onPress={() => {\n                    controllerFetch.abort();\n                  }}\n                >\n                  <View>\n                    <Text style={{ color: \"white\" }}>Cancelled</Text>\n                  </View>\n                </TouchableOpacity>\n              </View>\n            )}\n          </View>\n        }\n      />\n\n      {/*Logo */}\n      <Image\n        resizeMode=\"center\"\n        style={{\n          width: winSize.width / 2,\n          height: \"250px\",\n          marginTop: \"-20px\",\n        }}\n        source={{ uri: require(\"./assets/logo.png\") }}\n      ></Image>\n\n      {/*Nome e cognome utente */}\n      <Text\n        style={{\n          color: \"white\",\n          fontSize:\n            winSize.width < 900 ? winSize.width / 30 : winSize.width / 40,\n          fontWeight: \"400\",\n          marginTop: hp(\"-2%\"),\n        }}\n      >\n        {route.params.email}\n      </Text>\n\n      {/*Pulsante aggiunta foto */}\n      <input\n        onChange={async (event) => {\n          await openImagePickerAsync(event.target.files);\n          event.target.value = \"\";\n        }}\n        id=\"fileLoad\"\n        type=\"file\"\n        accept=\"*\"\n        style={{ display: \"none\" }}\n        multiple={true}\n      />\n      <label for=\"fileLoad\"></label>\n\n      <View\n        style={{\n          width: \"100%\",\n          justifyContent: \"center\",\n          flexDirection: \"row\",\n          height: \"5%\",\n          marginTop: hp(\"3%\"),\n          alignItems: \"center\",\n        }}\n      >\n        {/*Tatso logout */}\n        <TouchableOpacity\n          style={{\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n          onPress={async () => {\n            await AsyncStorage.clear();\n            signOut(auth);\n            navigation.push(\"LogIn\");\n          }}\n        >\n          <Icon name=\"exit-to-app\" color={\"white\"} size={30} />\n          <Text style={{ color: \"white\", fontWeight: 200 }}>Logout</Text>\n        </TouchableOpacity>\n\n        {/*Pulsante back */}\n        {stackDir[stackDir.length - 1] != \"Photos\" ? (\n          <TouchableOpacity\n            style={{\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              marginLeft: \"50px\",\n            }}\n            onPress={() => {\n              if (stackDir.length != 1) {\n                //ritorno alla dir precedente\n                let newStack = Object.assign([], stackDir); //si fa così per creare una copia dell'array nello stato\n                newStack.pop();\n                setStackDir(newStack);\n\n                //attiverà useEffect\n                setImages([]);\n              }\n            }}\n          >\n            <Icon name=\"keyboard-backspace\" color={\"white\"} size={30} />\n            <Text style={{ color: \"white\", fontWeight: 200 }}>Back</Text>\n          </TouchableOpacity>\n        ) : null}\n      </View>\n\n      <ScrollView\n        style={{\n          marginTop: \"20px\",\n          width: \"100%\",\n          backgroundColor: \"#2b2b2b\",\n          borderTopLeftRadius: \"50px\",\n          borderTopRightRadius: \"50px\",\n        }}\n      >\n        {folders.length == 0 && images.length == 0 ? (\n          <View\n            style={{\n              width: \"100%\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              height: winSize.height / 2,\n            }}\n          >\n            {/*Icona empty folder */}\n            <Icon name=\"folder-plus-outline\" color={\"#757575\"} size={50} />\n            <Text style={{ color: \"#757575\", fontWeight: 200 }}>\n              Empty folder\n            </Text>\n          </View>\n        ) : (\n          <View>\n            <View style={{ width: \"100%\" }}>\n              {/*Container folders */}\n              <FlatList\n                numColumns={1}\n                data={folders}\n                renderItem={renderItemFolder}\n                keyExtractor={(itemFolders) => itemFolders.id}\n              />\n            </View>\n            <View style={{ width: \"100%\" }}>\n              {/*Container photo */}\n              <FlatList\n                numColumns={1}\n                data={images}\n                renderItem={renderItem}\n                keyExtractor={(item) => item.id}\n              />\n            </View>\n          </View>\n        )}\n      </ScrollView>\n    </View>\n  );\n};\n\nexport default Home;\n","import { StatusBar } from \"expo-status-bar\";\nimport * as React from \"react\";\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  useWindowDimensions,\n  ActivityIndicator,\n  TextInput,\n  Image,\n  ScrollView,\n} from \"react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport {\n  widthPercentageToDP as wp,\n  heightPercentageToDP as hp,\n} from \"react-native-responsive-screen\";\nimport {\n  addDoc,\n  doc,\n  collection,\n  getFirestore,\n  getDocs,\n  query,\n  deleteDoc,\n  orderBy,\n  startAfter,\n  limit,\n  startAt,\n  endBefore,\n  updateDoc,\n  setDoc,\n  getDoc,\n  where,\n  increment,\n} from \"firebase/firestore/\";\nimport Spinner from \"react-native-loading-spinner-overlay\";\nimport Icon from \"react-native-vector-icons/MaterialCommunityIcons\";\nimport { WebView } from \"react-native-webview\";\nimport axios from \"axios\";\n\nconst FileInfo = ({ route, navigation }) => {\n  //per dimensioni finestra in real time\n  const winSize = useWindowDimensions();\n\n  //inizializzo databse firebase\n  const db = getFirestore();\n\n  //inizializzo overlay caricamento\n  let [spinnerVisible, setSpinnerVisibile] = React.useState(false);\n\n  //stato file\n  let [stato, setStato] = React.useState(\"\");\n\n  React.useEffect(async () => {\n    let status = await axios.get(\n      \"https://api.web3.storage/status/\" + route.params.cid\n    );\n\n    if (status.data.deals.length > 0) setStato(\"Pinned\");\n    else setStato(\"Queuing\");\n  }, []);\n\n  return (\n    <ScrollView\n      style={{ backgroundColor: \"#191919\" }}\n      contentContainerStyle={{\n        width: \"flex\",\n        backgroundColor: \"#191919\",\n        alignItems: \"center\",\n      }}\n    >\n      {/*overlay loading */}\n      <Spinner\n        visible={spinnerVisible}\n        textStyle={{ color: \"white\" }}\n        children={\n          <View\n            style={{\n              width: \"100%\",\n              height: \"100%\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            {/*Spinner */}\n            <ActivityIndicator\n              color={\"white\"}\n              size={\"large\"}\n            ></ActivityIndicator>\n          </View>\n        }\n      />\n\n      {/*Logo */}\n      <Image\n        resizeMode=\"center\"\n        style={{\n          width: winSize.width / 2,\n          height: \"250px\",\n          marginTop: \"-20px\",\n        }}\n        source={{ uri: require(\"./assets/logo.png\") }}\n      ></Image>\n\n      {/*Nome e cognome utente */}\n      <Text\n        style={{\n          color: \"white\",\n          fontSize:\n            winSize.width < 900 ? winSize.width / 30 : winSize.width / 40,\n          fontWeight: \"400\",\n          marginTop: hp(\"-2%\"),\n        }}\n      >\n        {route.params.email}\n      </Text>\n\n      <View\n        style={{\n          width: \"100%\",\n          justifyContent: \"center\",\n          flexDirection: \"row\",\n          height: \"5%\",\n          marginTop: hp(\"3%\"),\n          alignItems: \"center\",\n        }}\n      >\n        {/*Pulsante back */}\n        <TouchableOpacity\n          style={{\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n          onPress={() => {\n            navigation.goBack();\n          }}\n        >\n          <Icon name=\"keyboard-backspace\" color={\"white\"} size={30} />\n          <Text style={{ color: \"white\", fontWeight: 200 }}>Back</Text>\n        </TouchableOpacity>\n      </View>\n\n      {/*Immagine documento */}\n      <Image\n        source={require(\"./assets/file.png\")}\n        style={{\n          width: \"90px\",\n          aspectRatio: 0.7,\n          height: \"110px\",\n          borderRadius: hp(\"5%\"),\n          marginTop: \"5%\",\n        }}\n      />\n\n      {/*Testo status */}\n      <Text\n        style={{\n          color: \"white\",\n          fontWeight: \"bold\",\n          fontSize: \"25px\",\n          marginTop: \"3%\",\n        }}\n      >\n        Status\n      </Text>\n      {/* status */}\n      <Text\n        style={{\n          color: stato == \"Pinned\" ? \"green\" : \"red\",\n          fontSize: \"20px\",\n          marginTop: \"1%\",\n          fontWeight: \"200\",\n        }}\n      >\n        {stato}\n      </Text>\n\n      {/*Testo nome */}\n      <Text\n        style={{\n          color: \"white\",\n          fontWeight: \"bold\",\n          fontSize: \"25px\",\n          marginTop: \"3%\",\n        }}\n      >\n        Name\n      </Text>\n      {/* nome */}\n      <Text\n        style={{\n          color: \"white\",\n          fontSize: \"20px\",\n          marginTop: \"1%\",\n          fontWeight: \"200\",\n        }}\n      >\n        {route.params.name}\n      </Text>\n\n      {/*Testo size */}\n      <Text\n        style={{\n          color: \"white\",\n          fontWeight: \"bold\",\n          fontSize: \"25px\",\n          marginTop: \"3%\",\n        }}\n      >\n        Size\n      </Text>\n      {/* size */}\n      <Text\n        style={{\n          color: \"white\",\n          fontSize: \"20px\",\n          marginTop: \"1%\",\n          fontWeight: \"200\",\n        }}\n      >\n        {(route.params.size / 1000000).toFixed(2) + \"MB\"}\n      </Text>\n\n      {/*Testo loading date */}\n      <Text\n        style={{\n          color: \"white\",\n          fontWeight: \"bold\",\n          fontSize: \"25px\",\n          marginTop: \"3%\",\n        }}\n      >\n        Loading date\n      </Text>\n      {/* date */}\n      <Text\n        style={{\n          color: \"white\",\n          fontSize: \"20px\",\n          marginTop: \"1%\",\n          fontWeight: \"200\",\n          marginBottom: \"2%\",\n        }}\n      >\n        {new Date(route.params.data).toLocaleString()}\n      </Text>\n    </ScrollView>\n  );\n};\n\nexport default FileInfo;\n","import { StatusBar } from 'expo-status-bar';\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { StyleSheet, Text, View } from 'react-native';\n\nimport LogIn from \"./LogIn\";\nimport SigIn from \"./SigIn\";\nimport Home from \"./Home copy\";\nimport FileInfo from \"./FileInfo\";\n\n\nconst Stack = createNativeStackNavigator();\n\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen\n          name=\"LogIn\"\n          component={LogIn}\n          options={{ headerShown: false }}\n        />\n        <Stack.Screen\n          name=\"SigIn\"\n          component={SigIn}\n          options={{ headerShown: false }}\n        />\n        <Stack.Screen\n          name=\"Home\"\n          component={Home}\n          options={{ headerShown: false }}\n        />\n        <Stack.Screen\n        name = \"FileInfo\"\n        component = {FileInfo}\n        options = {{headerShown: false}}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/media/filePublic.2537e54c.png\";","module.exports = __webpack_public_path__ + \"static/media/folder.5107a6da.png\";"],"sourceRoot":""}