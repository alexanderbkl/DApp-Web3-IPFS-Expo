{"version":3,"sources":["assets/file.png","App.js","Home copy.js","LogIn.js","SigIn.js","Settings.js","FileInfo.js","assets/filePublic.png","assets/folder.png","assets/Telegram.png","assets/github.png","assets/logo.png","config.js"],"names":["module","exports","TextEncodingPolyfill","require","global","TextEncoder","TextDecoder","Stack","createNativeStackNavigator","App","Navigator","Screen","name","component","LogIn","options","headerShown","SigIn","Home","FileInfo","Settings","axios","default","mutexFoto","controllerFetch","AbortController","controllerFetchDownload","web3s","Web3Storage","token","config","Web3StorageToken","abortController","route","navigation","winSize","useWindowDimensions","db","getFirestore","auth","getAuth","React","images","setImages","folders","setFolders","stackDir","setStackDir","value","total","progressValue","setProgressValue","spinnerVisible","setSpinnerVisibile","reload","setReload","menuOpen","setMenuOpen","current","numFile","setNumFile","elementoSelezionato","setElementoSelezionato","valueModal","setValueModal","aggiornaFoto","newPhotoId","Promise","resolve","reject","a","async","getDocs","query","collection","params","email","replaceAll","orderBy","where","data","listFold","j","oldFolders","id","docs","length","i","includes","filter","obj","item","cid","type","size","ranHeightImage","Math","random","undefined","width","hp","notPrivate","err","oldArray","then","modalita","menuSelection","menuSelectionFolder","openImagePickerAsync","selectedResult","response","confirm","errorLoading","filebuffer","enc","passwordKey","password","window","crypto","subtle","importKey","encode","key","iv","arrayBuffer","encrypt","idFile","caricato","file","File","put","wrapWithDirectory","onStoredChunk","floor","json","addDoc","Date","now","substring","lastIndexOf","dir","el","catch","alert","deleteDoc","doc","console","log","copy","push","newImages","splice","indexOf","win","test","navigator","userAgent","open","document","write","addEventListener","ev","abort","get","signal","responseType","onDownloadProgress","event","getElementById","innerHTML","loaded","createElement","blob","Blob","url","URL","createObjectURL","setAttribute","body","append","click","revokeObjectURL","remove","message","decrypt","decifrato","location","href","newName","prompt","trim","newObject","estenzione","slice","updateDoc","controllo1","controllo2","newFolders","oldStack","Item","onPress","style","padding","flexDirection","alignItems","source","cacheKey","aspectRatio","height","borderRadius","alignSelf","color","fontWeight","marginLeft","toFixed","toLocaleString","flex","Itemfolder","backgroundColor","visible","transparent","justifyContent","textAlign","fontSize","marginTop","position","iconColor","borderColor","backgroundDownColor","isOpen","items","label","onMenuToggle","onItemPress","index","nameFolder","createFolder","renderItemIcon","textStyle","children","marginBottom","progress","resizeMode","uri","onChange","target","files","accept","display","multiple","for","AsyncStorage","clear","signOut","newStack","pop","borderTopLeftRadius","borderTopRightRadius","numColumns","renderItem","keyExtractor","itemFolders","app","initializeApp","firebaseConfig","setEmail","setPassword","getItem","credentials","JSON","parse","credentialsJson","signInWithEmailAndPassword","userCredential","error","borderWidth","onChangeText","text","textContentType","placeholder","secureTextEntry","passwordRules","setItem","stringify","nome","setNome","cognome","setCognome","createUserWithEmailAndPassword","setDoc","goBack","contentContainerStyle","stato","setStato","deals","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId"],"mappings":"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","file":"static/js/app.3cada714.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/file.73e9524a.png\";","import { StatusBar } from \"expo-status-bar\";\r\nimport * as React from \"react\";\r\nimport { View, Text } from \"react-native\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\nimport Home from \"./Home copy\";\r\nimport LogIn from \"./LogIn\";\r\nimport SigIn from \"./SigIn\";\r\nimport Settings from \"./Settings\";\r\nimport FileInfo from \"./FileInfo\";\r\n\r\nconst TextEncodingPolyfill = require('text-encoding');\r\n\r\nObject.assign(global, {\r\n  TextEncoder: TextEncodingPolyfill.TextEncoder,\r\n  TextDecoder: TextEncodingPolyfill.TextDecoder,\r\n});\r\n\r\n\r\nconst Stack = createNativeStackNavigator();\r\n\r\nexport default function App() {\r\n  return (\r\n    <NavigationContainer>\r\n      <Stack.Navigator>\r\n        <Stack.Screen\r\n          name=\"LogIn\"\r\n          component={LogIn}\r\n          options={{ headerShown: false }}\r\n        />\r\n        <Stack.Screen\r\n          name=\"SigIn\"\r\n          component={SigIn}\r\n          options={{ headerShown: false }}\r\n        />\r\n        <Stack.Screen\r\n          name=\"Home\"\r\n          component={Home}\r\n          options={{ headerShown: false }}\r\n        />\r\n        <Stack.Screen\r\n          name=\"FileInfo\"\r\n          component={FileInfo}\r\n          options={{ headerShown: false }}\r\n        />\r\n        <Stack.Screen\r\n          name=\"Settings\"\r\n          component={Settings}\r\n          options={{ headerShown: false }}\r\n        />\r\n      </Stack.Navigator>\r\n    </NavigationContainer>\r\n  );\r\n}\r\n","import { StatusBar } from \"expo-status-bar\";\r\nimport * as React from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  Image,\r\n  TouchableOpacity,\r\n  useWindowDimensions,\r\n  ActivityIndicator,\r\n  FlatList,\r\n  ScrollView,\r\n  Modal,\r\n  Alert,\r\n} from \"react-native\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\nimport {\r\n  widthPercentageToDP as wp,\r\n  heightPercentageToDP as hp,\r\n} from \"react-native-responsive-screen\";\r\nimport * as ImagePicker from \"expo-image-picker\";\r\nimport {\r\n  addDoc,\r\n  doc,\r\n  collection,\r\n  getFirestore,\r\n  getDocs,\r\n  query,\r\n  deleteDoc,\r\n  orderBy,\r\n  startAfter,\r\n  limit,\r\n  startAt,\r\n  endBefore,\r\n  updateDoc,\r\n  setDoc,\r\n  getDoc,\r\n  where,\r\n  increment,\r\n} from \"firebase/firestore/\";\r\nimport { signOut, getAuth } from \"firebase/auth\";\r\nimport {\r\n  Menu,\r\n  MenuOptions,\r\n  MenuOption,\r\n  MenuTrigger,\r\n  MenuProvider,\r\n} from \"react-native-popup-menu\";\r\nvar aesjs = require(\"aes-js\");\r\nimport Spinner from \"react-native-loading-spinner-overlay\";\r\nconst axios = require(\"axios\").default;\r\nimport * as Progress from \"react-native-progress\";\r\n/*import { TreewalkCarSplitter } from \"carbites/treewalk\";\r\nimport { CarReader } from \"@ipld/car\";\r\nimport { CarWriter } from \"@ipld/car/lib/writer-browser\";\r\nimport { pack } from \"ipfs-car/dist/esm/pack\";\r\nimport { packToBlob } from \"ipfs-car/dist/esm/pack/blob\";\r\nimport { MemoryBlockStore } from \"ipfs-car/dist/esm/blockstore/memory\";\r\nimport { NFTStorage } from \"nft.storage\";\r\nimport { Blockstore } from \"nft.storage/src/platform\";\r\nimport { BlockstoreCarReader } from \"nft.storage/src/bs-car-reader\";\r\nimport { transform } from \"streaming-iterables\";*/\r\nimport { FloatingMenu } from \"react-native-floating-action-menu\";\r\nimport Icon from \"react-native-vector-icons/MaterialCommunityIcons\";\r\nimport config from \"./config\";\r\nimport { Web3Storage, File } from 'web3.storage/dist/bundle.esm.min.js'\r\nimport copy from \"copy-to-clipboard\";\r\n\r\nlet mutexFoto = false;\r\nlet controllerFetch = new AbortController();\r\nlet controllerFetchDownload = new AbortController();\r\n//ho modificato il costruttore in modo da accettare l'abort controller per poter annullare il caricamento\r\nlet web3s = new Web3Storage({\r\n  token: config.Web3StorageToken,\r\n  abortController: controllerFetch,\r\n});\r\n\r\nconst Home = ({ route, navigation }) => {\r\n  //per dimensioni finestra in real time\r\n  const winSize = useWindowDimensions();\r\n\r\n  //inizializzo databse e autenticazione firebase\r\n  const db = getFirestore();\r\n  const auth = getAuth();\r\n\r\n  //state con array di immagini da caricare\r\n  let [images, setImages] = React.useState([]);\r\n\r\n  //state con array di cartelle da caricare\r\n  let [folders, setFolders] = React.useState([]);\r\n\r\n  //state per gestire cartelle\r\n  let [stackDir, setStackDir] = React.useState([\"Photos\"]);\r\n\r\n  //state per gestire barra caricamento\r\n  let [progressValue, setProgressValue] = React.useState({\r\n    value: 0,\r\n    total: 100,\r\n  });\r\n\r\n  //inizializzo overlay caricamento\r\n  let [spinnerVisible, setSpinnerVisibile] = React.useState(false);\r\n\r\n  //per non mostrare pulsante durante reload e primo caricamento\r\n  let [reload, setReload] = React.useState(false);\r\n\r\n  //state apertura menu\r\n  let [menuOpen, setMenuOpen] = React.useState(false);\r\n\r\n  //numero file da caricare\r\n  let [numFile, setNumFile] = React.useState({ current: 0, total: 0 });\r\n\r\n  //per gestire poi il modal del menu del file o cartella\r\n  let [elementoSelezionato, setElementoSelezionato] = React.useState({});\r\n\r\n  //per selezionare il modal da mostrare 1=file 2 =folders 0=niente\r\n  let [valueModal, setValueModal] = React.useState(0);\r\n\r\n  let aggiornaFoto = function (newPhotoId) {\r\n    return new Promise(async (resolve, reject) => {\r\n      if (!mutexFoto) {\r\n        mutexFoto = true;\r\n\r\n        //prendo i cid da firebase prendo il zip dall url ipfs + cid lo unzippo e creo il blob per mostrarlo\r\n        let data = await getDocs(\r\n          query(\r\n            collection(\r\n              db,\r\n              \"Utenti\",\r\n              route.params.email.replaceAll(\".\", \"DOT\"),\r\n              \"Photos\"\r\n            ),\r\n            orderBy(\"data\", \"desc\"),\r\n            where(\"dir\", \"==\", stackDir)\r\n          )\r\n        );\r\n\r\n        //carico cartelle\r\n        setFolders([]);\r\n        let listFold = await getDocs(\r\n          query(\r\n            collection(\r\n              db,\r\n              \"Utenti\",\r\n              route.params.email.replaceAll(\".\", \"DOT\"),\r\n              \"folders\"\r\n            ),\r\n            where(\"dir\", \"==\", stackDir)\r\n          )\r\n        );\r\n\r\n        //carico nome cartelle nello state\r\n        for (let j = 0; j < listFold.docs.length; j++) {\r\n          setFolders((oldFolders) => [\r\n            ...oldFolders,\r\n            {\r\n              id: listFold.docs[j].id,\r\n              name: listFold.docs[j].data().name,\r\n              data: listFold.docs[j].data().data,\r\n            },\r\n          ]);\r\n        }\r\n\r\n        //uso questa i per sbloccare il mutex solo quando il fetch ha finito e sono state caricate\r\n        //tutte le foto\r\n        let i = 0;\r\n\r\n        //sblocco il mutex se se è vuota la lista\r\n        if (data.docs.length == 0) resolve();\r\n\r\n        for (i; i < data.docs.length; i++) {\r\n          //controllo se non è già presente nello state altrimenti ogni volta ad esempio che carichi un nuova foto\r\n          //ricarica tutto\r\n          if (\r\n            !images.includes(\r\n              images.filter((obj) => obj.id === data.docs[i].id)[0]\r\n            )\r\n          ) {\r\n            let item = {\r\n              cid: data.docs[i].data().cid,\r\n              data: data.docs[i].data().data,\r\n              id: data.docs[i].id,\r\n              name: data.docs[i].data().name,\r\n              type: data.docs[i].data().type,\r\n              size: data.docs[i].data().size,\r\n              //Assegno un altezza a caso per il rendering\r\n              ranHeightImage:\r\n                Math.random() < 0.5\r\n                  ? undefined\r\n                  : winSize.width < 900\r\n                  ? hp(\"20%\")\r\n                  : hp(\"25%\"),\r\n            };\r\n            try {\r\n              item.notPrivate = data.docs[i].data().notPrivate;\r\n            } catch (err) {}\r\n\r\n            //se viene aggiunta una nuova immagine la metto all'inizio dellarray e poi esco dal for\r\n            //in modo che carico solo le nuove immagini e non ripeteo il caricamento delle altre gia presenti\r\n            if (data.docs[i].id == newPhotoId) {\r\n              setImages((oldArray) => [item, ...oldArray]);\r\n              i = data.docs.length;\r\n            } else {\r\n              setImages((oldArray) => [...oldArray, item]);\r\n            }\r\n\r\n            //sblocco il mutex se sono state caricate tutte le foto\r\n            if (data.docs.length - 1 == i) {\r\n              resolve();\r\n            }\r\n          } else {\r\n            //se è gia presente l'immagine\r\n\r\n            //sblocco il mutex se sono state caricate tutte le foto\r\n            if (data.docs.length - 1 == i) {\r\n              resolve();\r\n            }\r\n          }\r\n        }\r\n      }\r\n      resolve();\r\n    });\r\n  };\r\n\r\n  //Eseguito Appena si apre la pagina e quando premo pulsante reload\r\n  React.useEffect(async () => {\r\n    if (images.length == 0) {\r\n      setSpinnerVisibile(true);\r\n      setReload(true);\r\n      aggiornaFoto().then(() => {\r\n        mutexFoto = false;\r\n        setSpinnerVisibile(false);\r\n        setReload(false);\r\n      });\r\n    }\r\n  }, [images]);\r\n\r\n  //eseguito quando cambia elemento selezionato\r\n  React.useEffect(() => {\r\n    //per gestire il click diretto sul file o sulla cartella, senza passare per il modal\r\n    if (elementoSelezionato.modalita == \"diretta\") {\r\n      if (elementoSelezionato.size != undefined) menuSelection(1);\r\n      else menuSelectionFolder(3);\r\n    }\r\n  }, [elementoSelezionato]);\r\n\r\n  //picker immagini\r\n  let openImagePickerAsync = async (selectedResult) => {\r\n    //alert per scelta upload files pubblici o privati\r\n    let response = confirm(\r\n      \"Do you want upload private (encrypted) or public (not encrypted) files? ('OK' for private, 'Cancel' for public)\"\r\n    );\r\n\r\n    //per alert conferma caricamento tutti i file\r\n    let errorLoading = false;\r\n\r\n    for (let i = 0; i < selectedResult.length; i++) {\r\n      //metto rotellina\r\n      setReload(true);\r\n      //metto overlay caricamneto\r\n      setSpinnerVisibile(true);\r\n      //per segnare durante il caricamento quale file si sta caricando\r\n      setNumFile({ current: i + 1, total: selectedResult.length });\r\n\r\n      //se è privato lo cifro altrimenti non lo cifro\r\n      let filebuffer;\r\n      if (response) {\r\n        let enc = new TextEncoder();\r\n        //allungo la password inserendo k perchè deve essere almeno essere lunga 16 per generare la chiave\r\n        let passwordKey = route.params.password;\r\n        while (passwordKey.length < 16) passwordKey += \"k\";\r\n\r\n        //genero key con la password\r\n        let key = await window.crypto.subtle.importKey(\r\n          \"raw\",\r\n          enc.encode(passwordKey),\r\n          \"AES-GCM\",\r\n          false,\r\n          [\"encrypt\", \"decrypt\"]\r\n        );\r\n\r\n        //cifro il file\r\n        filebuffer = await window.crypto.subtle.encrypt(\r\n          { name: \"AES-GCM\", iv: enc.encode(passwordKey) },\r\n          key,\r\n          await selectedResult[i].arrayBuffer()\r\n        );\r\n      } else {\r\n        filebuffer = await selectedResult[i].arrayBuffer();\r\n      }\r\n\r\n      //levo rotellina\r\n      setReload(false);\r\n      //resetto la progress bar\r\n      setProgressValue({ value: 0, total: 100 });\r\n\r\n      //id file per il catch\r\n      let idFile;\r\n\r\n      try {\r\n        /*let json;\r\n        if ((selectedResult[i].size / 1000000).toFixed(2) < 100) {\r\n          json = await axios.request({\r\n            url: \"https://api.web3.storage/upload\",\r\n            method: \"POST\",\r\n            signal: controllerFetch.signal,\r\n            headers: {\r\n              Authorization: \"Bearer \" + config.Web3StorageToken,\r\n            },\r\n            data: cifrato,\r\n            onUploadProgress: (prog) => {\r\n              setProgressValue({ value: prog.loaded, total: prog.total });\r\n            },\r\n          });\r\n        } else {\r\n          /* let BlobCifrato = new Blob([cifrato]);\r\n            const blockstore = new Blockstore();\r\n            const { root: cid } = await pack({\r\n              input: [{ path: \"blob\", content: BlobCifrato.stream() }],\r\n              blockstore: blockstore,\r\n              wrapWithDirectory: false,\r\n            });\r\n            const car = new BlockstoreCarReader(1, [cid], blockstore);\r\n\r\n            const targetSize = 1024 * 1024 * 10;\r\n            const splitter =\r\n              car instanceof Blob\r\n                ? await TreewalkCarSplitter.fromBlob(car, targetSize)\r\n                : new TreewalkCarSplitter(car, targetSize);\r\n\r\n            //li uso per la barra di caricamento\r\n            let counterCars = 0;\r\n            for await (const cid of splitter.cars()) {\r\n              counterCars++;\r\n            }\r\n            let caricati = 0;\r\n\r\n            const upload = transform(3, async function (car) {\r\n              const carParts = [];\r\n              for await (const part of car) {\r\n                carParts.push(part);\r\n              }\r\n              const carFile = new Blob(carParts, { type: \"application/car\" });\r\n\r\n              const response = await axios.request({\r\n                onUploadProgress: (event) => {\r\n                  setProgressValue({\r\n                    value: event.loaded,\r\n                    total: event.total,\r\n                  });\r\n                },\r\n                url: /*\"https://api.nft.storage/upload\"*/\r\n        /* \"https://api.web3.storage/car\",\r\n                method: \"POST\",\r\n                signal: controllerFetch.signal,\r\n                headers: {\r\n                  \"content-Type\": \"application/car\",\r\n                  Authorization:*/\r\n        /*\"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDgyNTY0MzFEQUYwMjU4MEFENTU5NDU2NDc0OURhQWJCZTY5NWUzRjkiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY0Mjg3NjE3NTM0OCwibmFtZSI6ImRzdG9yYWdlIn0.TeG3_YYxhZeWtzpPPNxoietTB0yezr_Pqvq30yjao5w\",*/\r\n        /* \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDg3RTZiZDFhYTUyOUNmYWRmOURhMGY0NTNiMEE4ZDlGRDM3MjM2ZUIiLCJpc3MiOiJ3ZWIzLXN0b3JhZ2UiLCJpYXQiOjE2NDU0NTQ1NTcyNjUsIm5hbWUiOiJEUGhvdG8ifQ.WM4zuZ9UuGwODetDm37xMmpPLkCXXai-wAxw9Opf7Yk\",\r\n                },\r\n                data: carFile,\r\n              });\r\n\r\n              return response.data.value.cid;\r\n            });\r\n\r\n            let root;\r\n            for await (const cid of upload(splitter.cars())) {\r\n              //aggiorno progresso caricamento\r\n              caricati = caricati + 1;\r\n              setProgressValue({ value: caricati, total: counterCars });\r\n              root = cid;\r\n            }\r\n\r\n            json = cid.toString();*/\r\n\r\n        /* let BlobCifrato = new Blob([cifrato]);\r\n          const blockstore = new Blockstore();\r\n          const { root: cid, out: iterable } = await pack({\r\n            input: [{ path: \"blob\", content: BlobCifrato.stream() }],\r\n            blockstore: blockstore,\r\n            wrapWithDirectory: false,\r\n          });\r\n          const car = await CarReader.fromIterable(iterable);\r\n          const targetSize = 100000000;\r\n          const splitter = new TreewalkCarSplitter(car, targetSize);\r\n\r\n          //li uso per la barra di caricamento\r\n          let counterCars = Math.floor(BlobCifrato.size / targetSize);\r\n          let caricati = 0;\r\n          console.log(counterCars);\r\n\r\n          const upload = transform(3, async function (smallCar) {\r\n            const carParts = [];\r\n            for await (const part of smallCar) {\r\n              carParts.push(part);\r\n            }\r\n            const carFile = new Blob(carParts, { type: \"application/car\" });\r\n\r\n            const response = await axios.request({\r\n              url: \"https://api.web3.storage/car\",\r\n              method: \"POST\",\r\n              signal: controllerFetch.signal,\r\n              headers: {\r\n                \"content-Type\": \"application/car\",\r\n                Authorization: \"Bearer \" + config.Web3StorageToken,\r\n              },\r\n              data: carFile,\r\n            });\r\n          });\r\n\r\n          for await (const cid of upload(splitter.cars())) {\r\n            //aggiorno progresso caricamento\r\n            caricati = caricati + 1;\r\n            setProgressValue({ value: caricati, total: counterCars });\r\n          }\r\n\r\n        json = cid.toString();\r\n         }*/\r\n\r\n        //carico file su web3.storage\r\n        let caricato = 0;\r\n        const file = new File([filebuffer], \"file\");\r\n        const json = await web3s.put([file], {\r\n          wrapWithDirectory: false,\r\n          onStoredChunk: (size) => {\r\n            //aggiorno lo stato del caricamento\r\n            caricato = Math.floor(caricato + size);\r\n\r\n            if (caricato > file.size)\r\n              setProgressValue({ value: file.size, total: file.size });\r\n            else setProgressValue({ value: caricato, total: file.size });\r\n          },\r\n          controllerFetch,\r\n        });\r\n\r\n        //aggiungo cid  a firebase\r\n        let el = await addDoc(\r\n          collection(\r\n            db,\r\n            \"Utenti\",\r\n            route.params.email.replaceAll(\".\", \"DOT\"),\r\n            \"Photos\"\r\n          ),\r\n          {\r\n            cid:\r\n              /*cid.ipnft*/ json.data == undefined\r\n                ? json\r\n                : json.data /*.value*/.cid,\r\n            data: Date.now(),\r\n            name: selectedResult[i].name,\r\n            type:\r\n              selectedResult[i].name.substring(\r\n                selectedResult[i].name.lastIndexOf(\".\") + 1\r\n              ) == \"rar\" ||\r\n              selectedResult[i].name.substring(\r\n                selectedResult[i].name.lastIndexOf(\".\") + 1\r\n              ) == \"zip\"\r\n                ? \"application/zip\"\r\n                : selectedResult[i].type,\r\n            size: selectedResult[i].size,\r\n            dir: stackDir,\r\n            notPrivate: !response,\r\n          }\r\n        );\r\n\r\n        idFile = el.id;\r\n\r\n        await aggiornaFoto(el.id)\r\n          .then(() => {\r\n            mutexFoto = false;\r\n            setSpinnerVisibile(false);\r\n            setReload(false);\r\n          })\r\n          .catch((err) => {\r\n            mutexFoto = false;\r\n\r\n            alert(\"Loading file cancelled\");\r\n\r\n            //tolgo overlay caricamneto\r\n            setSpinnerVisibile(false);\r\n\r\n            //annullo tutti i caricamenti in coda\r\n            i = selectedResult.length;\r\n          });\r\n      } catch (err) {\r\n        //cosi annullo tutti i caricamenti in coda\r\n        i = selectedResult.length;\r\n\r\n        errorLoading = true;\r\n\r\n        try {\r\n          //elimino da firebase\r\n          await deleteDoc(\r\n            doc(\r\n              db,\r\n              \"Utenti\",\r\n              route.params.email.replaceAll(\".\", \"DOT\"),\r\n              \"Photos\",\r\n              idFile\r\n            )\r\n          );\r\n        } catch (ert) {}\r\n\r\n        controllerFetch = new AbortController();\r\n\r\n        web3s = new Web3Storage({\r\n          token: config.Web3StorageToken,\r\n          abortController: controllerFetch,\r\n        });\r\n\r\n        console.log(err);\r\n        alert(\"Loading failed\");\r\n        //tolgo overlay caricamneto\r\n        setSpinnerVisibile(false);\r\n        setReload(false);\r\n      }\r\n    }\r\n    if (!errorLoading) alert(\"All files have been uploaded successfully\");\r\n  };\r\n\r\n  let createFolder = async () => {\r\n    let nameFolder = window.prompt(\"Enter the name of the folder\");\r\n\r\n    if (nameFolder != null && nameFolder != \"\") {\r\n      await addDoc(\r\n        collection(\r\n          db,\r\n          \"Utenti\",\r\n          route.params.email.replaceAll(\".\", \"DOT\"),\r\n          \"folders\"\r\n        ),\r\n        {\r\n          name: nameFolder,\r\n          data: Date.now(),\r\n          dir: stackDir,\r\n        }\r\n      );\r\n\r\n      setSpinnerVisibile(true);\r\n      setReload(true);\r\n      await aggiornaFoto().then(() => {\r\n        mutexFoto = false;\r\n        setSpinnerVisibile(false);\r\n        setReload(false);\r\n      });\r\n    }\r\n  };\r\n\r\n  //menu al click della foto\r\n  let menuSelection = async (value) => {\r\n    //copy link per file pubblici\r\n    if (value == 5) {\r\n      copy(\"https://\" + elementoSelezionato.cid + \".ipfs.dweb.link\");\r\n\r\n      alert(\"Link copied to clipboard\");\r\n    }\r\n\r\n    //info file\r\n    if (value == 4) {\r\n      navigation.push(\"FileInfo\", {\r\n        email: route.params.email,\r\n        name: elementoSelezionato.name,\r\n        size: elementoSelezionato.size,\r\n        data: elementoSelezionato.data,\r\n        cid: elementoSelezionato.cid,\r\n      });\r\n    }\r\n\r\n    //Elimina foto\r\n    if (value == 2) {\r\n      //elimino da firebase\r\n      await deleteDoc(\r\n        doc(\r\n          db,\r\n          \"Utenti\",\r\n          route.params.email.replaceAll(\".\", \"DOT\"),\r\n          \"Photos\",\r\n          elementoSelezionato.id\r\n        )\r\n      );\r\n\r\n      //elimino dallo state\r\n      let newImages = Object.assign([], images); //si fa così per creare una copia dell'array nello stato\r\n      newImages.splice(\r\n        newImages.indexOf(\r\n          newImages.filter((obj) => obj.id === elementoSelezionato.id)[0]\r\n        ),\r\n        1\r\n      );\r\n      setImages(newImages);\r\n    }\r\n\r\n    //Download foto\r\n    if (value == 1) {\r\n      if (!elementoSelezionato.notPrivate) {\r\n        let win;\r\n\r\n        if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent))\r\n          win = window;\r\n        else win = window.open();\r\n\r\n        win.window.document.write(\r\n          \"<html>  <head>    <style>      html,      body {        height: 100%;        width: 100%;      }      .container {        align-items: center;        display: flex;        justify-content: center;        height: 100%;        width: 100%;      }    </style>  </head>  <body style='background-color: #191919; overflow: hidden'>    <div class='container'>      <img src='https://darchive5.web.app/static/media/logo.a7ce87a3.png' style='width: 250px' />      <div class='content'>        <p          id='textDownload'          style='color: white; font-family: Arial, Helvetica, sans-serif'        >          Download of \" +\r\n            elementoSelezionato.name +\r\n            \" in progress...        </p>      </div>    </div>  </body></html>\"\r\n        );\r\n\r\n        //se chiudo la finestra eseguo abort del download\r\n        win.window.addEventListener(\"beforeunload\", (ev) => {\r\n          controllerFetchDownload.abort();\r\n          controllerFetchDownload = new AbortController();\r\n        });\r\n\r\n        axios\r\n          .get(\r\n            /* \"https://ipfs.io/ipfs/\" + elementoSelezionato.cid */ \"https://\" +\r\n              elementoSelezionato.cid +\r\n              \".ipfs.dweb.link\",\r\n            {\r\n              signal: controllerFetchDownload.signal,\r\n              responseType: \"arraybuffer\",\r\n              onDownloadProgress: (event) => {\r\n                win.document.getElementById(\"textDownload\").innerHTML =\r\n                  \"Download of \" +\r\n                  elementoSelezionato.name +\r\n                  \" in progress...\" +\r\n                  \" \" +\r\n                  event.loaded +\r\n                  \"/\" +\r\n                  event.total;\r\n              },\r\n            }\r\n          )\r\n          .then(async (arrayBuffer) => {\r\n            let enc = new TextEncoder();\r\n            //allungo la password inserendo k perchè deve essere almeno essere lunga 16 per generare la chiave\r\n            let passwordKey = route.params.password;\r\n            while (passwordKey.length < 16) passwordKey += \"k\";\r\n\r\n            //genero key con la password\r\n            let key = await window.crypto.subtle.importKey(\r\n              \"raw\",\r\n              enc.encode(passwordKey),\r\n              \"AES-GCM\",\r\n              false,\r\n              [\"encrypt\", \"decrypt\"]\r\n            );\r\n\r\n            //decifro il file\r\n            let decifrato = await window.crypto.subtle.decrypt(\r\n              { name: \"AES-GCM\", iv: enc.encode(passwordKey) },\r\n              key,\r\n              arrayBuffer.data\r\n            );\r\n\r\n            //se è un immagine o un video lo faccio visualizzare\r\n            //altrimenti lo scarico dandogli il nome del file giusto\r\n            if (\r\n              elementoSelezionato.type.includes(\"image\") ||\r\n              elementoSelezionato.type.includes(\"video\")\r\n            ) {\r\n              let blob = new Blob([decifrato], {\r\n                type: elementoSelezionato.type,\r\n              });\r\n              let url = URL.createObjectURL(blob);\r\n              win.location.href = url;\r\n            } else {\r\n              //scarico il file\r\n              var a = win.document.createElement(\"a\");\r\n              let blob = new Blob([decifrato], {\r\n                type: elementoSelezionato.type,\r\n              });\r\n              let url = URL.createObjectURL(blob);\r\n              a.setAttribute(\"href\", url);\r\n              a.setAttribute(\"download\", elementoSelezionato.name);\r\n              win.document.body.append(a);\r\n              a.click();\r\n              win.window.URL.revokeObjectURL(url);\r\n              a.remove();\r\n            }\r\n          })\r\n          .catch((err) => {\r\n            //errore durante il download\r\n            if (err.message != \"canceled\") {\r\n              alert(\"Error during downloading \" + elementoSelezionato.name);\r\n              win.document.getElementById(\"textDownload\").innerHTML =\r\n                \"Error during downloading \" + elementoSelezionato.name;\r\n            }\r\n          });\r\n      } else {\r\n        let win;\r\n\r\n        if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent))\r\n          win = window;\r\n        else win = window.open();\r\n\r\n        win.window.document.write(\r\n          \"<html>  <head>    <style>      html,      body {        height: 100%;        width: 100%;      }      .container {        align-items: center;        display: flex;        justify-content: center;        height: 100%;        width: 100%;      }    </style>  </head>  <body style='background-color: #191919; overflow: hidden'>    <div class='container'>      <img src='https://darchive5.web.app/static/media/logo.a7ce87a3.png' style='width: 250px' />      <div class='content'>        <p          id='textDownload'          style='color: white; font-family: Arial, Helvetica, sans-serif'        >          Download of \" +\r\n            elementoSelezionato.name +\r\n            \" in progress...        </p>      </div>    </div>  </body></html>\"\r\n        );\r\n\r\n        //se chiudo la finestra eseguo abort del download\r\n        win.window.addEventListener(\"beforeunload\", (ev) => {\r\n          controllerFetchDownload.abort();\r\n          controllerFetchDownload = new AbortController();\r\n        });\r\n\r\n        axios\r\n          .get(\r\n            /* \"https://ipfs.io/ipfs/\" + elementoSelezionato.cid */ \"https://\" +\r\n              elementoSelezionato.cid +\r\n              \".ipfs.dweb.link\",\r\n            {\r\n              signal: controllerFetchDownload.signal,\r\n              responseType: \"arraybuffer\",\r\n              onDownloadProgress: (event) => {\r\n                win.document.getElementById(\"textDownload\").innerHTML =\r\n                  \"Download of \" +\r\n                  elementoSelezionato.name +\r\n                  \" in progress...\" +\r\n                  \" \" +\r\n                  event.loaded +\r\n                  \"/\" +\r\n                  event.total;\r\n              },\r\n            }\r\n          )\r\n          .then(async (arrayBuffer) => {\r\n            //scarico il file\r\n            var a = win.document.createElement(\"a\");\r\n            let blob = new Blob([arrayBuffer.data], {\r\n              type: elementoSelezionato.type,\r\n            });\r\n            let url = URL.createObjectURL(blob);\r\n            a.setAttribute(\"href\", url);\r\n            a.setAttribute(\"download\", elementoSelezionato.name);\r\n            win.document.body.append(a);\r\n            a.click();\r\n            win.window.URL.revokeObjectURL(url);\r\n            a.remove();\r\n          })\r\n          .catch((err) => {\r\n            //errore durante il download\r\n            if (err.message != \"canceled\") {\r\n              alert(\"Error during downloading \" + elementoSelezionato.name);\r\n              win.document.getElementById(\"textDownload\").innerHTML =\r\n                \"Error during downloading \" + elementoSelezionato.name;\r\n            }\r\n          });\r\n      }\r\n    }\r\n\r\n    //rinomina file\r\n    if (value == 3) {\r\n      let newName = window.prompt(\"Enter new name\");\r\n      if (newName != null && newName.trim() != \"\") {\r\n        //rinomino oggetto in state\r\n        let newImages = Object.assign([], images); //si fa così per creare una copia dell'array nello stato\r\n        let newObject = newImages.filter(\r\n          (obj) => obj.id === elementoSelezionato.id\r\n        )[0];\r\n        let estenzione = newObject.name.slice(newObject.name.lastIndexOf(\".\"));\r\n        newObject.name = newName.trim() + estenzione;\r\n        newImages[\r\n          newImages.indexOf(\r\n            newImages.filter((obj) => obj.id === elementoSelezionato.id)[0]\r\n          )\r\n        ] = newObject;\r\n        setImages(newImages);\r\n\r\n        //rinomino su firebase\r\n        await updateDoc(\r\n          doc(\r\n            db,\r\n            \"Utenti\",\r\n            route.params.email.replaceAll(\".\", \"DOT\"),\r\n            \"Photos\",\r\n            elementoSelezionato.id\r\n          ),\r\n          { name: newName.trim() + estenzione }\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  //menu al click della cartella\r\n  let menuSelectionFolder = async (value) => {\r\n    //Elimina folder\r\n    if (value == 2) {\r\n      //controllo se la cartella contiene cartelle\r\n      let controllo1 = await getDocs(\r\n        query(\r\n          collection(\r\n            db,\r\n            \"Utenti\",\r\n            route.params.email.replaceAll(\".\", \"DOT\"),\r\n            \"folders\"\r\n          ),\r\n          where(\"dir\", \"array-contains\", elementoSelezionato.id)\r\n        )\r\n      );\r\n\r\n      //controllo se la cartella contiene file\r\n      let controllo2 = await getDocs(\r\n        query(\r\n          collection(\r\n            db,\r\n            \"Utenti\",\r\n            route.params.email.replaceAll(\".\", \"DOT\"),\r\n            \"Photos\"\r\n          ),\r\n          where(\"dir\", \"array-contains\", elementoSelezionato.id)\r\n        )\r\n      );\r\n\r\n      //elimino se la cartella è vuota\r\n      if (controllo1.size == 0 && controllo2.size == 0) {\r\n        //elimino da firebase\r\n        await deleteDoc(\r\n          doc(\r\n            db,\r\n            \"Utenti\",\r\n            route.params.email.replaceAll(\".\", \"DOT\"),\r\n            \"folders\",\r\n            elementoSelezionato.id\r\n          )\r\n        );\r\n\r\n        //elimino dallo state\r\n        let newFolders = Object.assign([], folders); //si fa così per creare una copia dell'array nello stato\r\n        newFolders.splice(\r\n          newFolders.indexOf(\r\n            newFolders.filter((obj) => obj.id === elementoSelezionato.id)[0]\r\n          ),\r\n          1\r\n        );\r\n        setFolders(newFolders);\r\n      } else {\r\n        alert(\"The folder must be empty\");\r\n      }\r\n    }\r\n\r\n    //apro cartella\r\n    if (value == 3) {\r\n      setStackDir((oldStack) => [...oldStack, elementoSelezionato.id]);\r\n\r\n      setImages([]);\r\n    }\r\n\r\n    //rinomino cartella\r\n    if (value == 1) {\r\n      let newName = window.prompt(\"Enter new name\");\r\n      if (newName != null && newName.trim() != \"\") {\r\n        //rinomino oggetto in state\r\n        let newFolders = Object.assign([], folders); //si fa così per creare una copia dell'array nello stato\r\n        let newObject = newFolders.filter(\r\n          (obj) => obj.id === elementoSelezionato.id\r\n        )[0];\r\n        newObject.name = newName.trim();\r\n        newFolders[\r\n          newFolders.indexOf(\r\n            newFolders.filter((obj) => obj.id === elementoSelezionato.id)[0]\r\n          )\r\n        ] = newObject;\r\n        setFolders(newFolders);\r\n\r\n        //rinomino su firebase\r\n        await updateDoc(\r\n          doc(\r\n            db,\r\n            \"Utenti\",\r\n            route.params.email.replaceAll(\".\", \"DOT\"),\r\n            \"folders\",\r\n            elementoSelezionato.id\r\n          ),\r\n          { name: newName.trim() }\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  ///////////////RENDER IMMAGINI/////////////////////////////////////\r\n  const Item = ({ data, cid, id, name, size, type, notPrivate }) => {\r\n    return (\r\n      //Menu  compare alla pressione dell'immagine\r\n      <TouchableOpacity\r\n        onPress={() => {\r\n          setElementoSelezionato({\r\n            id: id,\r\n            cid: cid,\r\n            type: type,\r\n            name: name,\r\n            size: size,\r\n            data: data,\r\n            notPrivate: notPrivate,\r\n            modalita: \"diretta\",\r\n          });\r\n        }}\r\n      >\r\n        <View\r\n          style={{\r\n            padding: winSize.width < 900 ? hp(\"2%\") : hp(\"3%\"),\r\n          }}\r\n        >\r\n          <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\r\n            {/*Immagine */}\r\n            <Image\r\n              source={\r\n                notPrivate\r\n                  ? require(\"./assets/filePublic.png\")\r\n                  : require(\"./assets/file.png\")\r\n              }\r\n              cacheKey={cid}\r\n              style={{\r\n                width: \"90px\",\r\n                aspectRatio: 0.7,\r\n                height: \"110px\",\r\n                borderRadius: hp(\"5%\"),\r\n                alignSelf: \"stretch\",\r\n              }}\r\n            />\r\n\r\n            {/*nome file */}\r\n            <Text\r\n              style={{\r\n                color: \"white\",\r\n                width: \"25%\",\r\n                fontWeight: \"bold\",\r\n                marginLeft: \"3%\",\r\n              }}\r\n            >\r\n              {name}\r\n            </Text>\r\n\r\n            {/*size  + data*/}\r\n            <Text\r\n              style={{\r\n                color: \"white\",\r\n                width: \"25%\",\r\n                fontWeight: 200,\r\n                marginLeft: \"10%\",\r\n              }}\r\n            >\r\n              {\"Size : \" +\r\n                (size / 1000000).toFixed(2) +\r\n                \"MB Loading date: \" +\r\n                new Date(data).toLocaleString()}\r\n            </Text>\r\n\r\n            {/*Icona per aprire impostazioni file */}\r\n            <View style={{ flex: 1, alignItems: \"flex-end\" }}>\r\n              <TouchableOpacity\r\n                onPress={() => {\r\n                  setElementoSelezionato({\r\n                    id: id,\r\n                    cid: cid,\r\n                    type: type,\r\n                    name: name,\r\n                    size: size,\r\n                    data: data,\r\n                    notPrivate: notPrivate,\r\n                  });\r\n                  setValueModal(1);\r\n                }}\r\n              >\r\n                <Icon name=\"dots-vertical\" color={\"white\"} size={30} />\r\n              </TouchableOpacity>\r\n            </View>\r\n          </View>\r\n        </View>\r\n      </TouchableOpacity>\r\n    );\r\n  };\r\n\r\n  const renderItem = ({ item }) => (\r\n    <Item\r\n      data={item.data}\r\n      cid={item.cid}\r\n      id={item.id}\r\n      name={item.name}\r\n      size={item.size}\r\n      type={item.type}\r\n      notPrivate={item.notPrivate}\r\n    />\r\n  );\r\n\r\n  //////////////////////////////////////////////////////////////////\r\n\r\n  ///////////////RENDER Cartelle/////////////////////////////////////\r\n  const Itemfolder = ({ id, data, name }) => {\r\n    return (\r\n      //Menu  compare alla pressione dell'immagine\r\n      <TouchableOpacity\r\n        onPress={() => {\r\n          setElementoSelezionato({\r\n            id: id,\r\n            modalita: \"diretta\",\r\n          });\r\n        }}\r\n        style={{\r\n          padding: winSize.width < 900 ? hp(\"2%\") : hp(\"3%\"),\r\n        }}\r\n      >\r\n        <View>\r\n          <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\r\n            {/*Immagine */}\r\n            <Image\r\n              source={require(\"./assets/folder.png\")}\r\n              cacheKey={name}\r\n              style={{\r\n                width: \"90px\",\r\n                aspectRatio: 0.7,\r\n                height: \"110px\",\r\n                borderRadius: hp(\"5%\"),\r\n                alignSelf: \"stretch\",\r\n              }}\r\n            />\r\n            <Text\r\n              style={{\r\n                color: \"white\",\r\n                width: \"25%\",\r\n                fontWeight: \"bold\",\r\n                marginLeft: \"3%\",\r\n              }}\r\n            >\r\n              {name}\r\n            </Text>\r\n            <Text\r\n              style={{\r\n                color: \"white\",\r\n                width: \"25%\",\r\n                fontWeight: 200,\r\n                marginLeft: \"10%\",\r\n              }}\r\n            >\r\n              {\"Creation date: \" + new Date(data).toLocaleString()}\r\n            </Text>\r\n\r\n            {/*Icona per aprire impostazioni file */}\r\n            <View style={{ flex: 1, alignItems: \"flex-end\" }}>\r\n              <TouchableOpacity\r\n                onPress={() => {\r\n                  setElementoSelezionato({\r\n                    name: name,\r\n                    id: id,\r\n                  });\r\n                  setValueModal(2);\r\n                }}\r\n              >\r\n                <Icon name=\"dots-vertical\" color={\"white\"} size={30} />\r\n              </TouchableOpacity>\r\n            </View>\r\n          </View>\r\n        </View>\r\n      </TouchableOpacity>\r\n    );\r\n  };\r\n\r\n  const renderItemFolder = ({ item }) => (\r\n    <Itemfolder id={item.id} data={item.data} name={item.name} />\r\n  );\r\n\r\n  //////////////////////////////////////////////////////////////////\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        width: \"flex\",\r\n        height: \"100%\",\r\n        backgroundColor: \"#191919\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      {/*Modal opzioni file */}\r\n      <Modal visible={valueModal == 1 ? true : false} transparent={true}>\r\n        <View\r\n          style={{\r\n            backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n            flex: 1,\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            height: \"100%\",\r\n          }}\r\n        >\r\n          <View\r\n            style={{\r\n              backgroundColor: \"#2b2b2b\",\r\n              borderRadius: \"5%\",\r\n              width: winSize.width > 900 ? \"50%\" : \"80%\",\r\n              height: winSize.width > 900 ? \"70%\" : \"70%\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            {/*Nome file */}\r\n            <Text\r\n              style={{\r\n                textAlign: \"center\",\r\n                color: \"white\",\r\n                fontWeight: \"100\",\r\n                fontSize: \"30px\",\r\n                width: \"80%\",\r\n              }}\r\n            >\r\n              {elementoSelezionato.name}\r\n            </Text>\r\n\r\n            {/*Tasto download */}\r\n            <TouchableOpacity\r\n              onPress={() => {\r\n                menuSelection(1);\r\n                setValueModal(0);\r\n              }}\r\n              style={{ marginTop: winSize.width > 900 ? \"3%\" : \"7%\" }}\r\n            >\r\n              <Text style={{ color: \"white\", fontSize: \"25px\" }}>Download</Text>\r\n            </TouchableOpacity>\r\n\r\n            {elementoSelezionato.notPrivate != undefined &&\r\n            elementoSelezionato.notPrivate == true ? (\r\n              //tasto copy link\r\n              <TouchableOpacity\r\n                onPress={() => {\r\n                  menuSelection(5);\r\n                  setValueModal(0);\r\n                }}\r\n                style={{ marginTop: winSize.width > 900 ? \"3%\" : \"7%\" }}\r\n              >\r\n                <Text style={{ color: \"white\", fontSize: \"25px\" }}>\r\n                  Copy link\r\n                </Text>\r\n              </TouchableOpacity>\r\n            ) : null}\r\n\r\n            {/*Tasto rename */}\r\n            <TouchableOpacity\r\n              style={{ marginTop: winSize.width > 900 ? \"3%\" : \"7%\" }}\r\n              onPress={() => {\r\n                menuSelection(3);\r\n                setValueModal(0);\r\n              }}\r\n            >\r\n              <Text style={{ color: \"white\", fontSize: \"25px\" }}>Rename</Text>\r\n            </TouchableOpacity>\r\n\r\n            {/*Tasto Info */}\r\n            <TouchableOpacity\r\n              style={{ marginTop: winSize.width > 900 ? \"3%\" : \"7%\" }}\r\n              onPress={() => {\r\n                menuSelection(4);\r\n                setValueModal(0);\r\n              }}\r\n            >\r\n              <Text style={{ color: \"white\", fontSize: \"25px\" }}>Info</Text>\r\n            </TouchableOpacity>\r\n\r\n            {/*Tasto delete */}\r\n            <TouchableOpacity\r\n              style={{ marginTop: winSize.width > 900 ? \"3%\" : \"7%\" }}\r\n              onPress={() => {\r\n                menuSelection(2);\r\n                setValueModal(0);\r\n              }}\r\n            >\r\n              <Text style={{ color: \"red\", fontSize: \"25px\" }}>Delete</Text>\r\n            </TouchableOpacity>\r\n\r\n            {/*Tasto chiudere modal */}\r\n            <TouchableOpacity\r\n              style={{ marginTop: winSize.width > 900 ? \"3%\" : \"7%\" }}\r\n              onPress={() => {\r\n                setValueModal(0);\r\n              }}\r\n            >\r\n              <Icon name=\"close\" color={\"#ff5c5c\"} size={30} />\r\n            </TouchableOpacity>\r\n          </View>\r\n        </View>\r\n      </Modal>\r\n\r\n      {/*Modal opzioni folders */}\r\n      <Modal visible={valueModal == 2 ? true : false} transparent={true}>\r\n        <View\r\n          style={{\r\n            backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n            flex: 1,\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            height: \"100%\",\r\n          }}\r\n        >\r\n          <View\r\n            style={{\r\n              backgroundColor: \"#2b2b2b\",\r\n              borderRadius: \"5%\",\r\n              width: winSize.width > 900 ? \"50%\" : \"80%\",\r\n              height: winSize.width > 900 ? \"50%\" : \"60%\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            {/*Nome file */}\r\n            <Text\r\n              style={{\r\n                textAlign: \"center\",\r\n                color: \"white\",\r\n                fontWeight: \"100\",\r\n                fontSize: \"30px\",\r\n                width: \"80%\",\r\n              }}\r\n            >\r\n              {elementoSelezionato.name}\r\n            </Text>\r\n\r\n            {/*Tasto Open */}\r\n            <TouchableOpacity\r\n              onPress={() => {\r\n                menuSelectionFolder(3);\r\n                setValueModal(0);\r\n              }}\r\n              style={{ marginTop: winSize.width > 900 ? \"3%\" : \"7%\" }}\r\n            >\r\n              <Text style={{ color: \"white\", fontSize: \"25px\" }}>Open</Text>\r\n            </TouchableOpacity>\r\n\r\n            {/*Tasto rename */}\r\n            <TouchableOpacity\r\n              style={{ marginTop: winSize.width > 900 ? \"3%\" : \"7%\" }}\r\n              onPress={() => {\r\n                menuSelectionFolder(1);\r\n                setValueModal(0);\r\n              }}\r\n            >\r\n              <Text style={{ color: \"white\", fontSize: \"25px\" }}>Rename</Text>\r\n            </TouchableOpacity>\r\n\r\n            {/*Tasto delete */}\r\n            <TouchableOpacity\r\n              style={{ marginTop: winSize.width > 900 ? \"3%\" : \"7%\" }}\r\n              onPress={() => {\r\n                menuSelectionFolder(2);\r\n                setValueModal(0);\r\n              }}\r\n            >\r\n              <Text style={{ color: \"red\", fontSize: \"25px\" }}>Delete</Text>\r\n            </TouchableOpacity>\r\n\r\n            {/*Tasto chiudere modal */}\r\n            <TouchableOpacity\r\n              style={{ marginTop: winSize.width > 900 ? \"3%\" : \"7%\" }}\r\n              onPress={() => {\r\n                setValueModal(0);\r\n              }}\r\n            >\r\n              <Icon name=\"close\" color={\"#ff5c5c\"} size={30} />\r\n            </TouchableOpacity>\r\n          </View>\r\n        </View>\r\n      </Modal>\r\n\r\n      {/*Floating menu */}\r\n      <FloatingMenu\r\n        position=\"top-left\"\r\n        iconColor={\"#ff5c5c\"}\r\n        borderColor={\"#ff5c5c\"}\r\n        backgroundDownColor={\"#ff5c5c\"}\r\n        isOpen={menuOpen}\r\n        items={[\r\n          { label: \"Info\" },\r\n          { label: \"Reload\" },\r\n          { label: \"Create new folder\" },\r\n          { label: \"Upload\" },\r\n        ]}\r\n        onMenuToggle={() => {\r\n          setMenuOpen(!menuOpen);\r\n        }}\r\n        onItemPress={(item, index) => {\r\n          if (index == 0) {\r\n            document.getElementById(\"fileLoad\").click();\r\n            setMenuOpen(false);\r\n          }\r\n          if (index == 1) {\r\n            createFolder();\r\n            setMenuOpen(false);\r\n          }\r\n          if (index == 2) {\r\n            setImages([]);\r\n            setMenuOpen(false);\r\n          }\r\n          if (index == 3) {\r\n            navigation.push(\"Settings\", {\r\n              email: route.params.email,\r\n              password: route.params.password,\r\n            });\r\n          }\r\n        }}\r\n        renderItemIcon={(item, index) => {\r\n          if (index == 0)\r\n            return (\r\n              <Icon name=\"file-document-outline\" color={\"#ff5c5c\"} size={20} />\r\n            );\r\n          if (index == 1)\r\n            return (\r\n              <Icon name=\"folder-plus-outline\" color={\"#ff5c5c\"} size={20} />\r\n            );\r\n          if (index == 2)\r\n            return <Icon name=\"reload\" color={\"#ff5c5c\"} size={20} />;\r\n          if (index == 3)\r\n            return (\r\n              <Icon name=\"information-outline\" color={\"#ff5c5c\"} size={20} />\r\n            );\r\n        }}\r\n      />\r\n      {/*overlay loading */}\r\n      <Spinner\r\n        visible={spinnerVisible}\r\n        textStyle={{ color: \"white\" }}\r\n        children={\r\n          <View\r\n            style={{\r\n              width: \"100%\",\r\n              height: \"100%\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            {/*Spinner */}\r\n            {reload ? (\r\n              <ActivityIndicator\r\n                color={\"white\"}\r\n                size={\"large\"}\r\n              ></ActivityIndicator>\r\n            ) : (\r\n              <View\r\n                style={{\r\n                  height: \"40%\",\r\n                  borderRadius: hp(\"5%\"),\r\n                  backgroundColor: \"#2b2b2b\",\r\n                  width: winSize.width < 900 ? \"70%\" : \"30%\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"center\",\r\n                }}\r\n              >\r\n                {/*Testo numero file in caricamento */}\r\n                <Text\r\n                  style={{\r\n                    fontWeight: 200,\r\n                    color: \"white\",\r\n                    fontWeight: \"bold\",\r\n                    marginBottom: \"8%\",\r\n                  }}\r\n                >\r\n                  {\"Loading file \" + numFile.current + \" of \" + numFile.total}\r\n                </Text>\r\n\r\n                {/*Testo progress bar */}\r\n                <Text style={{ fontWeight: 200, color: \"white\" }}>\r\n                  {Math.floor(\r\n                    (progressValue.value / progressValue.total) * 100\r\n                  ) +\r\n                    \" / \" +\r\n                    100}\r\n                </Text>\r\n\r\n                {/*Progress bar */}\r\n                <Progress.Bar\r\n                  style={{ backgroundColor: \"white\" }}\r\n                  progress={progressValue.value / progressValue.total}\r\n                  width={200}\r\n                  color=\"black\"\r\n                />\r\n\r\n                {/*Tasto annulla caricamento lo mostro solo se è un caricamento di aggiunta foto*/}\r\n                <TouchableOpacity\r\n                  style={{\r\n                    backgroundColor: \"#ff5c5c\",\r\n                    width: \"150px\",\r\n                    height: \"50px\",\r\n                    marginTop: hp(\"5%\"),\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                  }}\r\n                  onPress={() => {\r\n                    controllerFetch.abort();\r\n                  }}\r\n                >\r\n                  <View>\r\n                    <Text style={{ color: \"white\" }}>Cancelled</Text>\r\n                  </View>\r\n                </TouchableOpacity>\r\n              </View>\r\n            )}\r\n          </View>\r\n        }\r\n      />\r\n\r\n      {/*Logo */}\r\n      <Image\r\n        resizeMode=\"center\"\r\n        style={{\r\n          width: winSize.width / 2,\r\n          height: \"250px\",\r\n          marginTop: \"-20px\",\r\n        }}\r\n        source={{ uri: require(\"./assets/logo.png\") }}\r\n      ></Image>\r\n\r\n      {/*Nome e cognome utente */}\r\n      <Text\r\n        style={{\r\n          color: \"white\",\r\n          fontSize:\r\n            winSize.width < 900 ? winSize.width / 30 : winSize.width / 40,\r\n          fontWeight: \"400\",\r\n          marginTop: hp(\"-2%\"),\r\n        }}\r\n      >\r\n        {route.params.email}\r\n      </Text>\r\n\r\n      {/*Pulsante aggiunta foto */}\r\n      <input\r\n        onChange={async (event) => {\r\n          await openImagePickerAsync(event.target.files);\r\n          event.target.value = \"\";\r\n        }}\r\n        id=\"fileLoad\"\r\n        type=\"file\"\r\n        accept=\"*\"\r\n        style={{ display: \"none\" }}\r\n        multiple={true}\r\n      />\r\n      <label for=\"fileLoad\"></label>\r\n\r\n      <View\r\n        style={{\r\n          width: \"100%\",\r\n          justifyContent: \"center\",\r\n          flexDirection: \"row\",\r\n          height: \"5%\",\r\n          marginTop: hp(\"3%\"),\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        {/*Tatso logout */}\r\n        <TouchableOpacity\r\n          style={{\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n          onPress={async () => {\r\n            await AsyncStorage.clear();\r\n            signOut(auth);\r\n            navigation.push(\"LogIn\");\r\n          }}\r\n        >\r\n          <Icon name=\"exit-to-app\" color={\"white\"} size={30} />\r\n          <Text style={{ color: \"white\", fontWeight: 200 }}>Logout</Text>\r\n        </TouchableOpacity>\r\n\r\n        {/*Pulsante back */}\r\n        {stackDir[stackDir.length - 1] != \"Photos\" ? (\r\n          <TouchableOpacity\r\n            style={{\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              marginLeft: \"50px\",\r\n            }}\r\n            onPress={() => {\r\n              if (stackDir.length != 1) {\r\n                //ritorno alla dir precedente\r\n                let newStack = Object.assign([], stackDir); //si fa così per creare una copia dell'array nello stato\r\n                newStack.pop();\r\n                setStackDir(newStack);\r\n\r\n                //attiverà useEffect\r\n                setImages([]);\r\n              }\r\n            }}\r\n          >\r\n            <Icon name=\"keyboard-backspace\" color={\"white\"} size={30} />\r\n            <Text style={{ color: \"white\", fontWeight: 200 }}>Back</Text>\r\n          </TouchableOpacity>\r\n        ) : null}\r\n      </View>\r\n\r\n      <ScrollView\r\n        style={{\r\n          marginTop: \"20px\",\r\n          width: \"100%\",\r\n          backgroundColor: \"#2b2b2b\",\r\n          borderTopLeftRadius: \"50px\",\r\n          borderTopRightRadius: \"50px\",\r\n        }}\r\n      >\r\n        {folders.length == 0 && images.length == 0 ? (\r\n          <View\r\n            style={{\r\n              width: \"100%\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n              height: winSize.height / 2,\r\n            }}\r\n          >\r\n            {/*Icona empty folder */}\r\n            <Icon name=\"folder-plus-outline\" color={\"#757575\"} size={50} />\r\n            <Text style={{ color: \"#757575\", fontWeight: 200 }}>\r\n              Empty folder\r\n            </Text>\r\n          </View>\r\n        ) : (\r\n          <View>\r\n            <View style={{ width: \"100%\" }}>\r\n              {/*Container folders */}\r\n              <FlatList\r\n                numColumns={1}\r\n                data={folders}\r\n                renderItem={renderItemFolder}\r\n                keyExtractor={(itemFolders) => itemFolders.id}\r\n              />\r\n            </View>\r\n            <View style={{ width: \"100%\" }}>\r\n              {/*Container photo */}\r\n              <FlatList\r\n                numColumns={1}\r\n                data={images}\r\n                renderItem={renderItem}\r\n                keyExtractor={(item) => item.id}\r\n              />\r\n            </View>\r\n          </View>\r\n        )}\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { StatusBar } from \"expo-status-bar\";\r\nimport * as React from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  Image,\r\n  TouchableOpacity,\r\n  useWindowDimensions,\r\n  TextInput,\r\n} from \"react-native\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\nimport {\r\n  widthPercentageToDP as wp,\r\n  heightPercentageToDP as hp,\r\n} from \"react-native-responsive-screen\";\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAuth, signInWithEmailAndPassword } from \"firebase/auth\";\r\n\r\nimport Icon from \"react-native-vector-icons/MaterialCommunityIcons\";\r\nimport config from \"./config\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDfP0XCt3KrnuMtEvqGVlUtDu7ZyznV3nE\",\r\n  authDomain: \"darchive5.firebaseapp.com\",\r\n  projectId: \"darchive5\",\r\n  storageBucket: \"darchive5.appspot.com\",\r\n  messagingSenderId: \"401935292054\",\r\n  appId: \"1:401935292054:web:d0efd92ecd1b06e634d4b7\",\r\n  measurementId: \"G-TL4FJNPGS7\",\r\n};\r\n\r\nconst LogIn = ({ navigation }) => {\r\n  //per dimensioni finestra in real time\r\n  const winSize = useWindowDimensions();\r\n\r\n  //inizializzo firebase\r\n  //il provider recaptcha serve per rifiutare richieste che provengono da siti al di fuori di darchive\r\n  const app = initializeApp(config.firebaseConfig);\r\n\r\n  const auth = getAuth(app);\r\n\r\n  let [email, setEmail] = React.useState(\"\");\r\n  let [password, setPassword] = React.useState(\"\");\r\n\r\n  let accedi = async () => {\r\n    signInWithEmailAndPassword(auth, email, password)\r\n      .then(async (userCredential) => {\r\n        //salvo per login automatico\r\n        await AsyncStorage.setItem(\r\n          \"credentials\",\r\n          JSON.stringify({\r\n            email: email,\r\n            password: password,\r\n          })\r\n        );\r\n\r\n        navigation.push(\"Home\", { email: email, password: password });\r\n      })\r\n      .catch((error) => {\r\n        alert(\"User credentials not valid\");\r\n      });\r\n  };\r\n\r\n  React.useEffect(async () => {\r\n    //se gia aveva eseguito l'accesso allora vado direttamente all'home\r\n    let credentials = await AsyncStorage.getItem(\"credentials\");\r\n    let credentialsJson = await JSON.parse(credentials);\r\n\r\n    if (credentialsJson != undefined)\r\n      signInWithEmailAndPassword(\r\n        auth,\r\n        credentialsJson.email,\r\n        credentialsJson.password\r\n      )\r\n        .then(async (userCredential) => {\r\n          navigation.push(\"Home\", {\r\n            email: credentialsJson.email,\r\n            password: credentialsJson.password,\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          alert(\"User credentials not valid\");\r\n        });\r\n  }, []);\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        width: \"flex\",\r\n        height: \"100%\",\r\n        backgroundColor: \"#191919\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      {/*Logo */}\r\n      <Image\r\n        resizeMode=\"center\"\r\n        style={{\r\n          width: winSize.width / 2,\r\n          height: \"250px\",\r\n          marginTop: \"-20px\",\r\n        }}\r\n        source={{ uri: require(\"./assets/logo.png\") }}\r\n      ></Image>\r\n      <View\r\n        style={{\r\n          marginTop: hp(\"1%\"),\r\n          borderRadius: \"20px\",\r\n          width: winSize.width < 900 ? winSize.width - 100 : winSize.width / 3,\r\n          backgroundColor: \"#2b2b2b\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        {/*Login Text */}\r\n        <Text\r\n          style={{\r\n            color: \"white\",\r\n            fontSize: hp(\"5%\"),\r\n            fontWeight: \"200\",\r\n            marginTop: hp(\"5%\"),\r\n          }}\r\n        >\r\n          Login\r\n        </Text>\r\n\r\n        {/*Input EMail */}\r\n        <TextInput\r\n          style={{\r\n            marginTop: hp(\"3%\"),\r\n            height: hp(\"5%\"),\r\n            width: winSize.width < 900 ? winSize.width / 2 : winSize.width / 4,\r\n            borderColor: \"black\",\r\n            borderWidth: \"1px\",\r\n            borderRadius: hp(\"5%\"),\r\n            textAlign: \"center\",\r\n            backgroundColor: \"white\",\r\n          }}\r\n          onChangeText={(text) => {\r\n            setEmail(text);\r\n          }}\r\n          textContentType=\"emailAddress\"\r\n          placeholder=\"Email\"\r\n        ></TextInput>\r\n\r\n        {/*Input Password */}\r\n        <TextInput\r\n          style={{\r\n            marginTop: hp(\"3%\"),\r\n            height: hp(\"5%\"),\r\n            width: winSize.width < 900 ? winSize.width / 2 : winSize.width / 4,\r\n            borderColor: \"black\",\r\n            borderWidth: \"1px\",\r\n            borderRadius: hp(\"5%\"),\r\n            textAlign: \"center\",\r\n            backgroundColor: \"white\",\r\n          }}\r\n          onChangeText={(text) => {\r\n            setPassword(text);\r\n          }}\r\n          secureTextEntry=\"true\"\r\n          passwordRules=\"true\"\r\n          placeholder=\"Password\"\r\n        ></TextInput>\r\n\r\n        {/*Pulsante LogIn */}\r\n        <TouchableOpacity\r\n          style={{\r\n            marginTop: hp(\"3%\"),\r\n            backgroundColor: \"#ff5c5c\",\r\n            width: \"150px\",\r\n            height: \"40px\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n          onPress={() => {\r\n            accedi();\r\n          }}\r\n        >\r\n          <View>\r\n            <Text style={{ color: \"white\" }}>Send</Text>\r\n          </View>\r\n        </TouchableOpacity>\r\n\r\n        {/*SigIn pulsante */}\r\n        <TouchableOpacity\r\n          style={{ marginTop: hp(\"2%\") }}\r\n          onPress={() => {\r\n            navigation.push(\"SigIn\", { auth: auth });\r\n          }}\r\n        >\r\n          <Text style={{ fontSize: hp(\"2%\"), fontWeight: 200, color: \"white\" }}>\r\n            SigIn now\r\n          </Text>\r\n        </TouchableOpacity>\r\n\r\n        {/*Pulsante info */}\r\n        <TouchableOpacity\r\n          style={{\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            marginTop: \"3%\",\r\n            marginBottom: hp(\"5%\"),\r\n          }}\r\n          onPress={() => {\r\n            navigation.push(\"Settings\", { email: \"\" });\r\n          }}\r\n        >\r\n          <Icon name=\"information-outline\" color={\"white\"} size={20} />\r\n        </TouchableOpacity>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default LogIn;\r\n","import { StatusBar } from \"expo-status-bar\";\r\nimport * as React from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  Image,\r\n  TouchableOpacity,\r\n  useWindowDimensions,\r\n  TextInput,\r\n} from \"react-native\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\nimport {\r\n  widthPercentageToDP as wp,\r\n  heightPercentageToDP as hp,\r\n} from \"react-native-responsive-screen\";\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { createUserWithEmailAndPassword, getAuth } from \"firebase/auth\";\r\nimport {\r\n  addDoc,\r\n  doc,\r\n  collection,\r\n  getFirestore,\r\n  getDocs,\r\n  query,\r\n  deleteDoc,\r\n  orderBy,\r\n  startAfter,\r\n  limit,\r\n  startAt,\r\n  endBefore,\r\n  updateDoc,\r\n  setDoc,\r\n  getDoc,\r\n  where,\r\n} from \"firebase/firestore/\";\r\n\r\nconst SigIn = ({ route, navigation }) => {\r\n  //per dimensioni finestra in real time\r\n  const winSize = useWindowDimensions();\r\n\r\n  //prendo auth firebase inizializzato in login\r\n  const auth = route.params.auth;\r\n\r\n  //inizializzo databsee firebase\r\n  const db = getFirestore();\r\n\r\n  let [nome, setNome] = React.useState(\"\");\r\n  let [cognome, setCognome] = React.useState(\"\");\r\n  let [email, setEmail] = React.useState(\"\");\r\n  let [password, setPassword] = React.useState(\"\");\r\n\r\n  let registrati = () => {\r\n    if (nome != \"\" && cognome != \"\" && email != \"\" && password != \"\") {\r\n      if (password.length >= 6) {\r\n        //creo nyovo utente se tutti campi compilati e email non esistente già e password più lunga di 6 caratteri\r\n        createUserWithEmailAndPassword(auth, email.trim(), password.trim())\r\n          .then(() => {\r\n            //salvo nome e cognome\r\n            setDoc(doc(db, \"Utenti\", email.replaceAll(\".\", \"DOT\").trim()), {\r\n              nome: nome.trim(),\r\n              cognome: cognome.trim(),\r\n            });\r\n\r\n            navigation.goBack();\r\n\r\n            alert(\"Registration has been completed successfully\");\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n            alert(\"This email already exist or is invalid\");\r\n          });\r\n      } else {\r\n        alert(\"Password has to be at least 6 character\");\r\n      }\r\n    } else {\r\n      alert(\"Complete all fields\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        width: \"flex\",\r\n        height: \"100%\",\r\n        backgroundColor: \"#191919\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      {/*Logo */}\r\n      <Image\r\n        resizeMode=\"center\"\r\n        style={{\r\n          width: winSize.width / 2,\r\n          height: \"250px\",\r\n          marginTop: \"-20px\",\r\n        }}\r\n        source={{ uri: require(\"./assets/logo.png\") }}\r\n      ></Image>\r\n\r\n      <View\r\n        style={{\r\n          marginTop: hp(\"1%\"),\r\n          borderRadius: \"20px\",\r\n          width: winSize.width < 900 ? winSize.width - 100 : winSize.width / 3,\r\n          backgroundColor: \"#2b2b2b\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        {/*SigIn Text */}\r\n        <Text\r\n          style={{\r\n            color: \"white\",\r\n            fontSize: hp(\"5%\"),\r\n            fontWeight: \"200\",\r\n            marginTop: hp(\"5%\"),\r\n          }}\r\n        >\r\n          SigIn\r\n        </Text>\r\n\r\n        {/*Input Nome */}\r\n        <TextInput\r\n          style={{\r\n            marginTop: hp(\"3%\"),\r\n            height: hp(\"5%\"),\r\n            width: winSize.width < 900 ? winSize.width / 2 : winSize.width / 4,\r\n            borderColor: \"black\",\r\n            backgroundColor: \"white\",\r\n            borderWidth: \"1px\",\r\n            borderRadius: hp(\"5%\"),\r\n            textAlign: \"center\",\r\n          }}\r\n          onChangeText={(text) => {\r\n            setNome(text);\r\n          }}\r\n          textContentType=\"name\"\r\n          placeholder=\"Name\"\r\n        ></TextInput>\r\n\r\n        {/*Input Cognome */}\r\n        <TextInput\r\n          style={{\r\n            marginTop: hp(\"3%\"),\r\n            height: hp(\"5%\"),\r\n            width: winSize.width < 900 ? winSize.width / 2 : winSize.width / 4,\r\n            borderColor: \"black\",\r\n            backgroundColor: \"white\",\r\n            borderWidth: \"1px\",\r\n            borderRadius: hp(\"5%\"),\r\n            textAlign: \"center\",\r\n          }}\r\n          onChangeText={(text) => {\r\n            setCognome(text);\r\n          }}\r\n          placeholder=\"Surname\"\r\n        ></TextInput>\r\n\r\n        {/*Input EMail */}\r\n        <TextInput\r\n          style={{\r\n            marginTop: hp(\"3%\"),\r\n            height: hp(\"5%\"),\r\n            width: winSize.width < 900 ? winSize.width / 2 : winSize.width / 4,\r\n            borderColor: \"black\",\r\n            borderWidth: \"1px\",\r\n            borderRadius: hp(\"5%\"),\r\n            textAlign: \"center\",\r\n            backgroundColor: \"white\",\r\n          }}\r\n          onChangeText={(text) => {\r\n            setEmail(text);\r\n          }}\r\n          textContentType=\"emailAddress\"\r\n          placeholder=\"Email\"\r\n        ></TextInput>\r\n\r\n        {/*Input Password */}\r\n        <TextInput\r\n          style={{\r\n            marginTop: hp(\"3%\"),\r\n            height: hp(\"5%\"),\r\n            width: winSize.width < 900 ? winSize.width / 2 : winSize.width / 4,\r\n            borderColor: \"black\",\r\n            borderWidth: \"1px\",\r\n            borderRadius: hp(\"5%\"),\r\n            textAlign: \"center\",\r\n            backgroundColor: \"white\",\r\n          }}\r\n          onChangeText={(text) => {\r\n            setPassword(text);\r\n          }}\r\n          secureTextEntry=\"true\"\r\n          passwordRules=\"true\"\r\n          placeholder=\"Password\"\r\n        ></TextInput>\r\n\r\n        {/*Pulsante Registrati */}\r\n        <TouchableOpacity\r\n          style={{\r\n            marginTop: hp(\"3%\"),\r\n            backgroundColor: \"#ff5c5c\",\r\n            width: \"150px\",\r\n            height: \"40px\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n          onPress={() => {\r\n            registrati();\r\n          }}\r\n        >\r\n          <View>\r\n            <Text style={{ color: \"white\" }}>Send</Text>\r\n          </View>\r\n        </TouchableOpacity>\r\n\r\n        {/*goBack pulsante */}\r\n        <TouchableOpacity\r\n          style={{ marginTop: hp(\"2%\"), marginBottom: hp(\"5%\") }}\r\n          onPress={() => navigation.goBack()}\r\n        >\r\n          <Text style={{ fontSize: hp(\"2%\"), fontWeight: 200, color: \"white\" }}>\r\n            Go back\r\n          </Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default SigIn;\r\n","import { StatusBar } from \"expo-status-bar\";\r\nimport * as React from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  TouchableOpacity,\r\n  useWindowDimensions,\r\n  ActivityIndicator,\r\n  TextInput,\r\n  Image,\r\n  ScrollView,\r\n} from \"react-native\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\nimport {\r\n  widthPercentageToDP as wp,\r\n  heightPercentageToDP as hp,\r\n} from \"react-native-responsive-screen\";\r\nimport {\r\n  addDoc,\r\n  doc,\r\n  collection,\r\n  getFirestore,\r\n  getDocs,\r\n  query,\r\n  deleteDoc,\r\n  orderBy,\r\n  startAfter,\r\n  limit,\r\n  startAt,\r\n  endBefore,\r\n  updateDoc,\r\n  setDoc,\r\n  getDoc,\r\n  where,\r\n  increment,\r\n} from \"firebase/firestore/\";\r\nimport Spinner from \"react-native-loading-spinner-overlay\";\r\nimport Icon from \"react-native-vector-icons/MaterialCommunityIcons\";\r\nimport { WebView } from \"react-native-webview\";\r\n\r\nconst Settings = ({ route, navigation }) => {\r\n  //per dimensioni finestra in real time\r\n  const winSize = useWindowDimensions();\r\n\r\n  //inizializzo databse firebase\r\n  const db = getFirestore();\r\n\r\n  //inizializzo overlay caricamento\r\n  let [spinnerVisible, setSpinnerVisibile] = React.useState(false);\r\n\r\n  return (\r\n    <ScrollView\r\n      style={{ backgroundColor: \"#191919\" }}\r\n      contentContainerStyle={{\r\n        width: \"flex\",\r\n        backgroundColor: \"#191919\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      {/*overlay loading */}\r\n      <Spinner\r\n        visible={spinnerVisible}\r\n        textStyle={{ color: \"white\" }}\r\n        children={\r\n          <View\r\n            style={{\r\n              width: \"100%\",\r\n              height: \"100%\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            {/*Spinner */}\r\n            <ActivityIndicator\r\n              color={\"white\"}\r\n              size={\"large\"}\r\n            ></ActivityIndicator>\r\n          </View>\r\n        }\r\n      />\r\n\r\n      {/*Logo */}\r\n      <Image\r\n        resizeMode=\"center\"\r\n        style={{\r\n          width: winSize.width / 2,\r\n          height: \"250px\",\r\n          marginTop: \"-20px\",\r\n        }}\r\n        source={{ uri: require(\"./assets/logo.png\") }}\r\n      ></Image>\r\n\r\n      {/*Nome e cognome utente */}\r\n      <Text\r\n        style={{\r\n          color: \"white\",\r\n          fontSize:\r\n            winSize.width < 900 ? winSize.width / 30 : winSize.width / 40,\r\n          fontWeight: \"400\",\r\n          marginTop: hp(\"-2%\"),\r\n        }}\r\n      >\r\n        {route.params.email}\r\n      </Text>\r\n\r\n      <View\r\n        style={{\r\n          width: \"100%\",\r\n          justifyContent: \"center\",\r\n          flexDirection: \"row\",\r\n          height: \"5%\",\r\n          marginTop: hp(\"3%\"),\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        {/*Pulsante back */}\r\n        <TouchableOpacity\r\n          style={{\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n          onPress={() => {\r\n            navigation.goBack();\r\n          }}\r\n        >\r\n          <Icon name=\"keyboard-backspace\" color={\"white\"} size={30} />\r\n          <Text style={{ color: \"white\", fontWeight: 200 }}>Back</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n\r\n      <View\r\n        style={{\r\n          borderRadius: \"20px\",\r\n          backgroundColor: \"#2b2b2b\",\r\n          width: \"70%\",\r\n          alignItems: \"center\",\r\n          marginTop: winSize.height / 20,\r\n        }}\r\n      >\r\n        {/*Info */}\r\n        <Text\r\n          style={{\r\n            color: \"white\",\r\n            textAlign: \"center\",\r\n            width: winSize.width / 2,\r\n            marginTop: \"5%\",\r\n          }}\r\n        >\r\n          Hi everyone, this is{\" \"}\r\n          {\r\n            <Text style={{ color: \"#ff5c5c\", fontWeight: \"bold\" }}>\r\n              DArchive\r\n            </Text>\r\n          }{\" \"}\r\n          a decentralized storage service. It is\r\n          based on the use of{\" \"}\r\n          {\r\n            <Text style={{ color: \"#ff5c5c\", fontWeight: \"bold\" }}>\r\n              <a\r\n                href=\"https://web3.storage/\"\r\n                style={{ color: \"#ff5c5c\" }}\r\n                target=\"_blank\"\r\n              >\r\n                Web3.storage\r\n              </a>\r\n            </Text>\r\n          }{\" \"}\r\n          that allows to get data persisted by{\" \"}\r\n          {\r\n            <Text style={{ color: \"#ff5c5c\", fontWeight: \"bold\" }}>\r\n              <a\r\n                href=\"https://filecoin.io/\"\r\n                style={{ color: \"#ff5c5c\" }}\r\n                target=\"_blank\"\r\n              >\r\n                Filecoin\r\n              </a>\r\n            </Text>\r\n          }{\" \"}\r\n          and available over{\" \"}\r\n          {\r\n            <Text style={{ color: \"#ff5c5c\", fontWeight: \"bold\" }}>\r\n              {\" \"}\r\n              <a\r\n                href=\"https://ipfs.io/\"\r\n                style={{ color: \"#ff5c5c\" }}\r\n                target=\"_blank\"\r\n              >\r\n                IPFS\r\n              </a>\r\n            </Text>\r\n          }{\" \"}\r\n          . Files are encrypted using the AES algorithm and their security is\r\n          based on the selected password.{\"\\n\"}Enjoy it!😁\r\n        </Text>\r\n\r\n        {/*Testo follow the project on */}\r\n        <Text\r\n          style={{\r\n            color: \"white\",\r\n            fontWeight: \"bold\",\r\n            fontSize: \"20px\",\r\n            marginTop: \"5%\",\r\n          }}\r\n        >\r\n          Follow the project on\r\n        </Text>\r\n\r\n        <View\r\n          style={{\r\n            width: \"100%\",\r\n            alignItems: \"center\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          {/*Pulsante telegram */}\r\n          <TouchableOpacity\r\n            style={{\r\n              marginTop: hp(\"3%\"),\r\n              marginBottom: \"3%\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n            }}\r\n            onPress={async () => {\r\n              let telegram = window.open();\r\n              telegram.location.href = \"https://t.me/Darchive5\";\r\n            }}\r\n          >\r\n            <Image\r\n              style={{\r\n                width: winSize.width > 900 ? \"50px\" : \"40px\",\r\n                height: winSize.width > 900 ? \"50px\" : \"40px\",\r\n                resizeMode: \"cover\",\r\n              }}\r\n              source={{ uri: require(\"./assets/Telegram.png\") }}\r\n            ></Image>\r\n          </TouchableOpacity>\r\n\r\n          {/*Pulsante github */}\r\n          <TouchableOpacity\r\n            style={{\r\n              marginTop: hp(\"3%\"),\r\n              marginBottom: \"3%\",\r\n              marginLeft: \"2%\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n            }}\r\n            onPress={async () => {\r\n              let telegram = window.open();\r\n              telegram.location.href =\r\n                \"https://github.com/vincenzoAiello/DArchive\";\r\n            }}\r\n          >\r\n            <Image\r\n              style={{\r\n                width: winSize.width > 900 ? \"50px\" : \"40px\",\r\n                height: winSize.width > 900 ? \"50px\" : \"40px\",\r\n                resizeMode: \"cover\",\r\n              }}\r\n              source={{ uri: require(\"./assets/github.png\") }}\r\n            ></Image>\r\n          </TouchableOpacity>\r\n        </View>\r\n\r\n        <View style={{ width: \"100%\", height: \"10%\" }}></View>\r\n      </View>\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","import { StatusBar } from \"expo-status-bar\";\r\nimport * as React from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  TouchableOpacity,\r\n  useWindowDimensions,\r\n  ActivityIndicator,\r\n  TextInput,\r\n  Image,\r\n  ScrollView,\r\n} from \"react-native\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\nimport {\r\n  widthPercentageToDP as wp,\r\n  heightPercentageToDP as hp,\r\n} from \"react-native-responsive-screen\";\r\nimport {\r\n  addDoc,\r\n  doc,\r\n  collection,\r\n  getFirestore,\r\n  getDocs,\r\n  query,\r\n  deleteDoc,\r\n  orderBy,\r\n  startAfter,\r\n  limit,\r\n  startAt,\r\n  endBefore,\r\n  updateDoc,\r\n  setDoc,\r\n  getDoc,\r\n  where,\r\n  increment,\r\n} from \"firebase/firestore/\";\r\nimport Spinner from \"react-native-loading-spinner-overlay\";\r\nimport Icon from \"react-native-vector-icons/MaterialCommunityIcons\";\r\nimport { WebView } from \"react-native-webview\";\r\nimport axios from \"axios\";\r\n\r\nconst FileInfo = ({ route, navigation }) => {\r\n  //per dimensioni finestra in real time\r\n  const winSize = useWindowDimensions();\r\n\r\n  //inizializzo databse firebase\r\n  const db = getFirestore();\r\n\r\n  //inizializzo overlay caricamento\r\n  let [spinnerVisible, setSpinnerVisibile] = React.useState(false);\r\n\r\n  //stato file\r\n  let [stato, setStato] = React.useState(\"\");\r\n\r\n  React.useEffect(async () => {\r\n    let status = await axios.get(\r\n      \"https://api.web3.storage/status/\" + route.params.cid\r\n    );\r\n\r\n    if (status.data.deals.length > 0) setStato(\"Pinned\");\r\n    else setStato(\"Queuing\");\r\n  }, []);\r\n\r\n  return (\r\n    <ScrollView\r\n      style={{ backgroundColor: \"#191919\" }}\r\n      contentContainerStyle={{\r\n        width: \"flex\",\r\n        backgroundColor: \"#191919\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      {/*overlay loading */}\r\n      <Spinner\r\n        visible={spinnerVisible}\r\n        textStyle={{ color: \"white\" }}\r\n        children={\r\n          <View\r\n            style={{\r\n              width: \"100%\",\r\n              height: \"100%\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            {/*Spinner */}\r\n            <ActivityIndicator\r\n              color={\"white\"}\r\n              size={\"large\"}\r\n            ></ActivityIndicator>\r\n          </View>\r\n        }\r\n      />\r\n\r\n      {/*Logo */}\r\n      <Image\r\n        resizeMode=\"center\"\r\n        style={{\r\n          width: winSize.width / 2,\r\n          height: \"250px\",\r\n          marginTop: \"-20px\",\r\n        }}\r\n        source={{ uri: require(\"./assets/logo.png\") }}\r\n      ></Image>\r\n\r\n      {/*Nome e cognome utente */}\r\n      <Text\r\n        style={{\r\n          color: \"white\",\r\n          fontSize:\r\n            winSize.width < 900 ? winSize.width / 30 : winSize.width / 40,\r\n          fontWeight: \"400\",\r\n          marginTop: hp(\"-2%\"),\r\n        }}\r\n      >\r\n        {route.params.email}\r\n      </Text>\r\n\r\n      <View\r\n        style={{\r\n          width: \"100%\",\r\n          justifyContent: \"center\",\r\n          flexDirection: \"row\",\r\n          height: \"5%\",\r\n          marginTop: hp(\"3%\"),\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        {/*Pulsante back */}\r\n        <TouchableOpacity\r\n          style={{\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n          onPress={() => {\r\n            navigation.goBack();\r\n          }}\r\n        >\r\n          <Icon name=\"keyboard-backspace\" color={\"white\"} size={30} />\r\n          <Text style={{ color: \"white\", fontWeight: 200 }}>Back</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n\r\n      {/*Immagine documento */}\r\n      <Image\r\n        source={require(\"./assets/file.png\")}\r\n        style={{\r\n          width: \"90px\",\r\n          aspectRatio: 0.7,\r\n          height: \"110px\",\r\n          borderRadius: hp(\"5%\"),\r\n          marginTop: \"5%\",\r\n        }}\r\n      />\r\n\r\n      {/*Testo status */}\r\n      <Text\r\n        style={{\r\n          color: \"white\",\r\n          fontWeight: \"bold\",\r\n          fontSize: \"25px\",\r\n          marginTop: \"3%\",\r\n        }}\r\n      >\r\n        Status\r\n      </Text>\r\n      {/* status */}\r\n      <Text\r\n        style={{\r\n          color: stato == \"Pinned\" ? \"green\" : \"red\",\r\n          fontSize: \"20px\",\r\n          marginTop: \"1%\",\r\n          fontWeight: \"200\",\r\n        }}\r\n      >\r\n        {stato}\r\n      </Text>\r\n\r\n      {/*Testo nome */}\r\n      <Text\r\n        style={{\r\n          color: \"white\",\r\n          fontWeight: \"bold\",\r\n          fontSize: \"25px\",\r\n          marginTop: \"3%\",\r\n        }}\r\n      >\r\n        Name\r\n      </Text>\r\n      {/* nome */}\r\n      <Text\r\n        style={{\r\n          color: \"white\",\r\n          fontSize: \"20px\",\r\n          marginTop: \"1%\",\r\n          fontWeight: \"200\",\r\n        }}\r\n      >\r\n        {route.params.name}\r\n      </Text>\r\n\r\n      {/*Testo size */}\r\n      <Text\r\n        style={{\r\n          color: \"white\",\r\n          fontWeight: \"bold\",\r\n          fontSize: \"25px\",\r\n          marginTop: \"3%\",\r\n        }}\r\n      >\r\n        Size\r\n      </Text>\r\n      {/* size */}\r\n      <Text\r\n        style={{\r\n          color: \"white\",\r\n          fontSize: \"20px\",\r\n          marginTop: \"1%\",\r\n          fontWeight: \"200\",\r\n        }}\r\n      >\r\n        {(route.params.size / 1000000).toFixed(2) + \"MB\"}\r\n      </Text>\r\n\r\n      {/*Testo loading date */}\r\n      <Text\r\n        style={{\r\n          color: \"white\",\r\n          fontWeight: \"bold\",\r\n          fontSize: \"25px\",\r\n          marginTop: \"3%\",\r\n        }}\r\n      >\r\n        Loading date\r\n      </Text>\r\n      {/* date */}\r\n      <Text\r\n        style={{\r\n          color: \"white\",\r\n          fontSize: \"20px\",\r\n          marginTop: \"1%\",\r\n          fontWeight: \"200\",\r\n          marginBottom: \"2%\",\r\n        }}\r\n      >\r\n        {new Date(route.params.data).toLocaleString()}\r\n      </Text>\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nexport default FileInfo;\r\n","module.exports = __webpack_public_path__ + \"static/media/filePublic.2537e54c.png\";","module.exports = __webpack_public_path__ + \"static/media/folder.5107a6da.png\";","module.exports = __webpack_public_path__ + \"static/media/Telegram.10b71eb5.png\";","module.exports = __webpack_public_path__ + \"static/media/github.81533a6b.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.deaa9c5a.png\";","// Import the functions you need from the SDKs you need\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDxqS-2MmrVRbhmg49Bx2P1b4f_lFeSkQ0\",\n  authDomain: \"ounn-ea631.firebaseapp.com\",\n  databaseURL: \"https://ounn-ea631-default-rtdb.firebaseio.com\",\n  projectId: \"ounn-ea631\",\n  storageBucket: \"ounn-ea631.appspot.com\",\n  messagingSenderId: \"111990065034\",\n  appId: \"1:111990065034:web:1b1a4a2fd6d9aef5db6a73\",\n  measurementId: \"G-YL3CYJJN58\"\n};\n\n\nconst Web3StorageToken = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweGE4MjU5MDcyYkUxRmEwODhhZTA3MTI3OTg2NDVEY0VBRjFGNDMzREQiLCJpc3MiOiJ3ZWIzLXN0b3JhZ2UiLCJpYXQiOjE2NTgyMjcyNTE1MTgsIm5hbWUiOiJvbm4ifQ.6AAz_KHuowFfJcxlf0jHbRoVEAKMv6iER_WSYkaUtr0\";\n\n\nexport default { firebaseConfig, Web3StorageToken };"],"sourceRoot":""}